import { Directive, HostListener, Inject, Input } from "@angular/core";
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NGX_MAT_TIMEPICKER_CONFIG } from "../tokens/ngx-mat-timepicker-config.token";
//
import { Subject } from "rxjs";
import { shareReplay, takeUntil } from "rxjs/operators";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker.service";
import * as i2 from "../services/ngx-mat-timepicker-event.service";
import * as i3 from "../services/ngx-mat-timepicker-locale.service";
export class NgxMatTimepickerBaseDirective {
    set color(newValue) {
        this._color = newValue;
    }
    get color() {
        return this._color;
    }
    get defaultTime() {
        return this._defaultTime;
    }
    set defaultTime(time) {
        this._defaultTime = time;
        this._setDefaultTime(time);
    }
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    constructor(_timepickerSrv, _eventSrv, _timepickerLocaleSrv, data) {
        this._timepickerSrv = _timepickerSrv;
        this._eventSrv = _eventSrv;
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this.data = data;
        this.activeTimeUnit = NgxMatTimepickerUnits.HOUR;
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
        this._subsCtrl$ = new Subject();
        this.color = data.color;
        this.defaultTime = data.defaultTime;
    }
    changePeriod(period) {
        this._timepickerSrv.period = period;
        this._onTimeChange();
    }
    changeTimeUnit(unit) {
        this.activeTimeUnit = unit;
    }
    close() {
        this.data.timepickerBaseRef.close();
    }
    ngOnDestroy() {
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    }
    ngOnInit() {
        this._defineTime();
        this.selectedHour = this._timepickerSrv.selectedHour
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.selectedMinute = this._timepickerSrv.selectedMinute
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.selectedPeriod = this._timepickerSrv.selectedPeriod
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))
            .subscribe({
            next: (v) => {
                v && this._setDefaultTime(v);
            }
        });
    }
    onHourChange(hour) {
        this._timepickerSrv.hour = hour;
        this._onTimeChange();
    }
    onHourSelected(hour) {
        if (!this.data.hoursOnly) {
            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);
        }
        this.data.timepickerBaseRef.hourSelected.next(hour);
    }
    onKeydown(e) {
        this._eventSrv.dispatchEvent(e);
        e.stopPropagation();
    }
    onMinuteChange(minute) {
        this._timepickerSrv.minute = minute;
        this._onTimeChange();
    }
    setTime() {
        this.data.timepickerBaseRef.timeSet.emit(this._timepickerSrv.getFullTime(this.data.format));
        this.close();
    }
    _defineTime() {
        const minTime = this.data.minTime;
        if (minTime && (!this.data.time && !this.data.defaultTime)) {
            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);
            this._setDefaultTime(time);
        }
    }
    _onTimeChange() {
        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {
            locale: this._locale,
            format: this.data.format
        });
        this.data.timepickerBaseRef.timeChanged.emit(time);
    }
    _setDefaultTime(time) {
        this._timepickerSrv.setDefaultTimeIfAvailable(time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerBaseDirective, deps: [{ token: i1.NgxMatTimepickerService }, { token: i2.NgxMatTimepickerEventService }, { token: i3.NgxMatTimepickerLocaleService }, { token: NGX_MAT_TIMEPICKER_CONFIG }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.5", type: NgxMatTimepickerBaseDirective, isStandalone: true, selector: "[ngxMatTimepickerBase]", inputs: { color: "color", defaultTime: "defaultTime" }, host: { listeners: { "keydown": "onKeydown($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerBaseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[ngxMatTimepickerBase]",
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.NgxMatTimepickerService }, { type: i2.NgxMatTimepickerEventService }, { type: i3.NgxMatTimepickerLocaleService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_MAT_TIMEPICKER_CONFIG]
                }] }], propDecorators: { color: [{
                type: Input
            }], defaultTime: [{
                type: Input
            }], onKeydown: [{
                type: HostListener,
                args: ["keydown", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,