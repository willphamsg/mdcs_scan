import { Directive, HostListener, HostBinding, Inject, Input, Optional } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { CdkOverlayOrigin } from "@angular/cdk/overlay";
import { MatFormField } from "@angular/material/form-field";
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
//
import { Subject, takeUntil } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker-locale.service";
import * as i2 from "@angular/material/form-field";
export class NgxMatTimepickerDirective {
    get element() {
        return this._elementRef && this._elementRef.nativeElement;
    }
    get format() {
        return this._format;
    }
    set format(value) {
        this._format = NgxMatTimepickerAdapter.isTwentyFour(+value) ? 24 : 12;
        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);
        if (isDynamicallyChanged) {
            this.value = this._value;
            this._timepicker.updateTime(this._value);
        }
        this._previousFormat = this._format;
    }
    get max() {
        return this._max;
    }
    set max(value) {
        if (typeof value === "string") {
            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._max = value;
    }
    get min() {
        return this._min;
    }
    set min(value) {
        if (typeof value === "string") {
            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._min = value;
    }
    set timepicker(picker) {
        this._registerTimepicker(picker);
    }
    get value() {
        if (!this._value) {
            return "";
        }
        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, { format: this.format, locale: this._locale });
    }
    set value(value) {
        if (!value) {
            this._value = "";
            this._updateInputValue();
            return;
        }
        const time = NgxMatTimepickerAdapter.formatTime(value, { locale: this._locale, format: this.format });
        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, this._min, this._max, "minutes", this._timepicker.minutesGap, this._format);
        if (isAvailable) {
            this._value = time;
            this._updateInputValue();
            return;
        }
        console.warn("Selected time doesn't match min or max value");
    }
    set _defaultTime(time) {
        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {
            locale: this._locale,
            format: this.format
        });
    }
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    constructor(_elementRef, _timepickerLocaleSrv, _matFormField) {
        this._elementRef = _elementRef;
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this._matFormField = _matFormField;
        this.cdkOverlayOrigin = new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);
        this._format = 12;
        this._subsCtrl$ = new Subject();
        this._value = "";
        this.onTouched = () => {
        };
        this._onChange = () => {
        };
    }
    ngOnChanges(changes) {
        // tslint:disable-next-line:no-string-literal
        const vChanges = changes["value"];
        if (vChanges && vChanges.currentValue) {
            this._defaultTime = vChanges.currentValue;
        }
    }
    ngOnDestroy() {
        this._unregisterTimepicker();
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    }
    onClick(event) {
        if (!this.disableClick) {
            this._timepicker.open();
            event.stopPropagation();
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    updateValue(e) {
        this.value = e.target.value;
        this._onChange(this.value);
    }
    writeValue(value) {
        this.value = value;
        if (value) {
            this._defaultTime = value;
        }
    }
    _registerTimepicker(picker) {
        if (picker) {
            this._timepicker = picker;
            this._timepicker.registerInput(this);
            this._timepicker.timeSet
                .pipe(takeUntil(this._subsCtrl$))
                .subscribe((time) => {
                this.value = time;
                this._onChange(this.value);
                this.onTouched();
                this._defaultTime = this._value;
            });
        }
        else {
            throw new Error("NgxMatTimepickerComponent is not defined." +
                " Please make sure you passed the timepicker to ngxMatTimepicker directive");
        }
    }
    _unregisterTimepicker() {
        if (this._timepicker) {
            this._timepicker.unregisterInput();
        }
    }
    _updateInputValue() {
        this._elementRef.nativeElement.value = this.value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgxMatTimepickerLocaleService }, { token: MatFormField, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.5", type: NgxMatTimepickerDirective, isStandalone: true, selector: "[ngxMatTimepicker]", inputs: { format: "format", max: "max", min: "min", timepicker: ["ngxMatTimepicker", "timepicker"], value: "value", disableClick: "disableClick", disabled: "disabled" }, host: { listeners: { "blur": "onTouched()", "click": "onClick($event)", "change": "updateValue($event)" }, properties: { "disabled": "disabled", "attr.cdkOverlayOrigin": "this.cdkOverlayOrigin" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: NgxMatTimepickerDirective,
                multi: true
            }
        ], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[ngxMatTimepicker]",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NgxMatTimepickerDirective,
                            multi: true
                        }
                    ],
                    // tslint:disable-next-line:no-host-metadata-property
                    host: {
                        "[disabled]": "disabled",
                        "(blur)": "onTouched()"
                    },
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.NgxMatTimepickerLocaleService }, { type: i2.MatFormField, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MatFormField]
                }] }], propDecorators: { format: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], timepicker: [{
                type: Input,
                args: ["ngxMatTimepicker"]
            }], value: [{
                type: Input
            }], cdkOverlayOrigin: [{
                type: HostBinding,
                args: ["attr.cdkOverlayOrigin"]
            }], disableClick: [{
                type: Input
            }], disabled: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ["click", ["$event"]]
            }], updateValue: [{
                type: HostListener,
                args: ["change", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,