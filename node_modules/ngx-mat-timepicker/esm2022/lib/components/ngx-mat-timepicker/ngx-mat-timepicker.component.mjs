import { coerceBooleanProperty } from "@angular/cdk/coercion";
import { Component, EventEmitter, HostBinding, Input, Output } from "@angular/core";
import { CdkConnectedOverlay } from "@angular/cdk/overlay";
import { NgxMatTimepickerAdapter } from "../../services/ngx-mat-timepicker-adapter";
import { NgxMatTimepickerDialogComponent } from "../ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component";
import { NGX_MAT_TIMEPICKER_CONFIG } from "../../tokens/ngx-mat-timepicker-config.token";
import { BehaviorSubject } from "rxjs";
import { NgxMatTimepickerStandaloneComponent } from "../ngx-mat-timepicker-standalone/ngx-mat-timepicker-standalone.component";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
let config;
export class NgxMatTimepickerProvider {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerProvider, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.5", type: NgxMatTimepickerProvider, isStandalone: true, selector: "ngx-mat-timepicker-provider", providers: [
            {
                provide: NGX_MAT_TIMEPICKER_CONFIG,
                useFactory() {
                    return config;
                }
            }
        ], ngImport: i0, template: `
		<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>`, isInline: true, dependencies: [{ kind: "component", type: NgxMatTimepickerStandaloneComponent, selector: "ngx-mat-timepicker-standalone" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerProvider, decorators: [{
            type: Component,
            args: [{
                    selector: "ngx-mat-timepicker-provider",
                    template: `
		<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>`,
                    standalone: true,
                    providers: [
                        {
                            provide: NGX_MAT_TIMEPICKER_CONFIG,
                            useFactory() {
                                return config;
                            }
                        }
                    ],
                    imports: [NgxMatTimepickerStandaloneComponent]
                }]
        }] });
export class NgxMatTimepickerComponent {
    static { this.nextId = 0; }
    set appendToInput(newValue) {
        this._appendToInput = coerceBooleanProperty(newValue);
    }
    set color(newValue) {
        this._color = newValue;
    }
    get color() {
        return this._color;
    }
    get disabled() {
        return this._timepickerInput && this._timepickerInput.disabled;
    }
    set dottedMinutesInGap(newValue) {
        this._dottedMinutesInGap = coerceBooleanProperty(newValue);
    }
    get dottedMinutesInGap() {
        return this._dottedMinutesInGap;
    }
    set enableKeyboardInput(newValue) {
        this._enableKeyboardInput = coerceBooleanProperty(newValue);
    }
    get enableKeyboardInput() {
        return this._enableKeyboardInput;
    }
    get format() {
        return this._timepickerInput ? this._timepickerInput.format : this._format;
    }
    set format(value) {
        this._format = NgxMatTimepickerAdapter.isTwentyFour(value) ? 24 : 12;
    }
    get inputElement() {
        return this._timepickerInput && this._timepickerInput.element;
    }
    get maxTime() {
        return this._timepickerInput ? this._timepickerInput.max : this.max;
    }
    get minTime() {
        return this._timepickerInput ? this._timepickerInput.min : this.min;
    }
    get minutesGap() {
        return this._minutesGap;
    }
    set minutesGap(gap) {
        if (gap == null) {
            return;
        }
        gap = Math.floor(gap);
        this._minutesGap = gap <= 59 ? gap : 1;
    }
    get overlayOrigin() {
        return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;
    }
    get time() {
        return this._timepickerInput && this._timepickerInput.value;
    }
    constructor(_dialog) {
        this._dialog = _dialog;
        this.closed = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursOnly = false;
        this.id = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;
        this.isEsc = !0;
        this.opened = new EventEmitter();
        this.overlayPositions = [
            {
                originX: "center",
                originY: "bottom",
                overlayX: "center",
                overlayY: "top",
                offsetY: 0
            },
            {
                originX: "center",
                originY: "top",
                overlayX: "center",
                overlayY: "bottom",
                offsetY: 0
            }
        ];
        this.showPicker = !1;
        this.timeChanged = new EventEmitter();
        this.timeSet = new EventEmitter();
        this.timeUpdated = new BehaviorSubject(void 0); // used in the dialog, check if a better approach can be used
        this._appendToInput = !1;
        this._color = "primary";
        this._dottedMinutesInGap = !1;
        this._enableKeyboardInput = !1;
        this._format = 12;
    }
    close() {
        if (this._appendToInput) {
            this._overlayRef && this._overlayRef.dispose();
        }
        else {
            this._dialogRef && this._dialogRef.close();
        }
        this.inputElement.focus(); // Fix ExpressionHasChangedAfterCheck error on overlay destroy
        this.showPicker = !1;
        this.closed.emit();
    }
    open() {
        // Set data to be injected
        config = {
            timepickerBaseRef: this,
            time: this.time,
            defaultTime: this.defaultTime,
            dottedMinutesInGap: this._dottedMinutesInGap,
            maxTime: this.maxTime,
            minTime: this.minTime,
            format: this.format,
            minutesGap: this.minutesGap,
            disableAnimation: this.disableAnimation,
            cancelBtnTmpl: this.cancelBtnTmpl,
            confirmBtnTmpl: this.confirmBtnTmpl,
            editableHintTmpl: this.editableHintTmpl,
            disabled: this.disabled,
            enableKeyboardInput: this.enableKeyboardInput,
            preventOverlayClick: this.preventOverlayClick,
            appendToInput: this._appendToInput,
            hoursOnly: this.hoursOnly,
            timepickerClass: this.timepickerClass,
            inputElement: this.inputElement,
            color: this.color
        };
        if (this._appendToInput) {
            this.showPicker = !0;
        }
        else {
            this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {
                panelClass: "ngx-mat-timepicker-dialog",
                data: {
                    ...config
                }
            });
            this._dialogRef
                .afterClosed()
                .subscribe(() => {
                this.closed.emit();
            });
        }
        this.opened.emit();
    }
    /***
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     */
    registerInput(input) {
        if (this._timepickerInput) {
            console.warn("Input for this timepicker was already set", input.element);
            throw Error("A Timepicker can only be associated with a single input.");
        }
        this._timepickerInput = input;
    }
    unregisterInput() {
        this._timepickerInput = void 0;
    }
    updateTime(time) {
        this.timeUpdated.next(time);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerComponent, deps: [{ token: i1.MatDialog }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.5", type: NgxMatTimepickerComponent, isStandalone: true, selector: "ngx-mat-timepicker", inputs: { appendToInput: "appendToInput", color: "color", dottedMinutesInGap: "dottedMinutesInGap", enableKeyboardInput: "enableKeyboardInput", format: "format", minutesGap: "minutesGap", cancelBtnTmpl: "cancelBtnTmpl", confirmBtnTmpl: "confirmBtnTmpl", defaultTime: "defaultTime", disableAnimation: "disableAnimation", editableHintTmpl: "editableHintTmpl", hoursOnly: "hoursOnly", isEsc: "isEsc", max: "max", min: "min", preventOverlayClick: "preventOverlayClick", timepickerClass: "timepickerClass" }, outputs: { closed: "closed", hourSelected: "hourSelected", opened: "opened", timeChanged: "timeChanged", timeSet: "timeSet" }, host: { properties: { "id": "this.id" } }, ngImport: i0, template: `
		<ng-template
				cdkConnectedOverlay
				[cdkConnectedOverlayPositions]="overlayPositions"
				[cdkConnectedOverlayHasBackdrop]="!0"
				cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
				(backdropClick)="close()"
				[cdkConnectedOverlayOrigin]="overlayOrigin"
				[cdkConnectedOverlayOpen]="showPicker">
			<ngx-mat-timepicker-provider></ngx-mat-timepicker-provider>
		</ng-template>
    `, isInline: true, dependencies: [{ kind: "directive", type: CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush", "cdkConnectedOverlayDisposeOnNavigation"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "component", type: NgxMatTimepickerProvider, selector: "ngx-mat-timepicker-provider" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "ngx-mat-timepicker",
                    template: `
		<ng-template
				cdkConnectedOverlay
				[cdkConnectedOverlayPositions]="overlayPositions"
				[cdkConnectedOverlayHasBackdrop]="!0"
				cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
				(backdropClick)="close()"
				[cdkConnectedOverlayOrigin]="overlayOrigin"
				[cdkConnectedOverlayOpen]="showPicker">
			<ngx-mat-timepicker-provider></ngx-mat-timepicker-provider>
		</ng-template>
    `,
                    standalone: true,
                    imports: [CdkConnectedOverlay, NgxMatTimepickerStandaloneComponent, NgxMatTimepickerProvider]
                }]
        }], ctorParameters: () => [{ type: i1.MatDialog }], propDecorators: { appendToInput: [{
                type: Input
            }], color: [{
                type: Input
            }], dottedMinutesInGap: [{
                type: Input
            }], enableKeyboardInput: [{
                type: Input
            }], format: [{
                type: Input
            }], minutesGap: [{
                type: Input
            }], cancelBtnTmpl: [{
                type: Input
            }], closed: [{
                type: Output
            }], confirmBtnTmpl: [{
                type: Input
            }], defaultTime: [{
                type: Input
            }], disableAnimation: [{
                type: Input
            }], editableHintTmpl: [{
                type: Input
            }], hourSelected: [{
                type: Output
            }], hoursOnly: [{
                type: Input
            }], id: [{
                type: HostBinding,
                args: ["id"]
            }], isEsc: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], opened: [{
                type: Output
            }], preventOverlayClick: [{
                type: Input
            }], timeChanged: [{
                type: Output
            }], timepickerClass: [{
                type: Input
            }], timeSet: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,