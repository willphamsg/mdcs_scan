import { Directive, EventEmitter, Input, Output } from "@angular/core";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import * as i0 from "@angular/core";
export class NgxMatTimepickerHoursFaceDirective {
    set color(newValue) {
        this._color = newValue;
    }
    get color() {
        return this._color;
    }
    set format(newValue) {
        this._format = newValue;
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
    }
    get format() {
        return this._format;
    }
    constructor() {
        this.hourChange = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursList = [];
        this._color = "primary";
        this._format = 24;
    }
    onTimeSelected(time) {
        this.hourSelected.next(time);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerHoursFaceDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.5", type: NgxMatTimepickerHoursFaceDirective, isStandalone: true, selector: "[ngxMatTimepickerHoursFace]", inputs: { color: "color", format: "format", maxTime: "maxTime", minTime: "minTime", selectedHour: "selectedHour" }, outputs: { hourChange: "hourChange", hourSelected: "hourSelected" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerHoursFaceDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[ngxMatTimepickerHoursFace]",
                    standalone: true
                }]
        }], ctorParameters: () => [], propDecorators: { color: [{
                type: Input
            }], format: [{
                type: Input
            }], hourChange: [{
                type: Output
            }], hourSelected: [{
                type: Output
            }], maxTime: [{
                type: Input
            }], minTime: [{
                type: Input
            }], selectedHour: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWhvdXJzLWZhY2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdC10aW1lcGlja2VyL3NyYy9saWIvY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXItaG91cnMtZmFjZS9uZ3gtbWF0LXRpbWVwaWNrZXItaG91cnMtZmFjZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUtyRSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQzs7QUFRM0UsTUFBTSxPQUFPLGtDQUFrQztJQUUzQyxJQUNJLEtBQUssQ0FBQyxRQUFzQjtRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUNJLE1BQU0sQ0FBQyxRQUFvQztRQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBYUQ7UUFYVSxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQTZCLENBQUM7UUFDM0QsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRXBELGNBQVMsR0FBZ0MsRUFBRSxDQUFDO1FBS2xDLFdBQU0sR0FBaUIsU0FBUyxDQUFDO1FBQ2pDLFlBQU8sR0FBK0IsRUFBRSxDQUFDO0lBR25ELENBQUM7SUFFRCxjQUFjLENBQUMsSUFBWTtRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDOzhHQXJDUSxrQ0FBa0M7a0dBQWxDLGtDQUFrQzs7MkZBQWxDLGtDQUFrQztrQkFKOUMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsNkJBQTZCO29CQUN2QyxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7d0RBSU8sS0FBSztzQkFEUixLQUFLO2dCQVVGLE1BQU07c0JBRFQsS0FBSztnQkFVSSxVQUFVO3NCQUFuQixNQUFNO2dCQUNHLFlBQVk7c0JBQXJCLE1BQU07Z0JBR0UsT0FBTztzQkFBZixLQUFLO2dCQUNHLE9BQU87c0JBQWYsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtUaGVtZVBhbGV0dGV9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9jb3JlXCI7XHJcbi8vXHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZX0gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItY2xvY2stZmFjZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZX0gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItZm9ybWF0LnR5cGVcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyVXRpbHN9IGZyb20gXCIuLi8uLi91dGlscy9uZ3gtbWF0LXRpbWVwaWNrZXIudXRpbHNcIjtcclxuLy9cclxuaW1wb3J0IHtEYXRlVGltZX0gZnJvbSBcInRzLWx1eG9uXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcIltuZ3hNYXRUaW1lcGlja2VySG91cnNGYWNlXVwiLFxyXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlckhvdXJzRmFjZURpcmVjdGl2ZSB7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBjb2xvcihuZXdWYWx1ZTogVGhlbWVQYWxldHRlKSB7XHJcbiAgICAgICAgdGhpcy5fY29sb3IgPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29sb3IoKTogVGhlbWVQYWxldHRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBmb3JtYXQobmV3VmFsdWU6IE5neE1hdFRpbWVwaWNrZXJGb3JtYXRUeXBlKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybWF0ID0gbmV3VmFsdWU7XHJcbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0SG91cnModGhpcy5fZm9ybWF0KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZm9ybWF0KCk6IE5neE1hdFRpbWVwaWNrZXJGb3JtYXRUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xyXG4gICAgfVxyXG5cclxuICAgIEBPdXRwdXQoKSBob3VyQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPigpO1xyXG4gICAgQE91dHB1dCgpIGhvdXJTZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG5cclxuICAgIGhvdXJzTGlzdDogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZVtdID0gW107XHJcbiAgICBASW5wdXQoKSBtYXhUaW1lOiBEYXRlVGltZTtcclxuICAgIEBJbnB1dCgpIG1pblRpbWU6IERhdGVUaW1lO1xyXG4gICAgQElucHV0KCkgc2VsZWN0ZWRIb3VyOiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlO1xyXG5cclxuICAgIHByb3RlY3RlZCBfY29sb3I6IFRoZW1lUGFsZXR0ZSA9IFwicHJpbWFyeVwiO1xyXG4gICAgcHJvdGVjdGVkIF9mb3JtYXQ6IE5neE1hdFRpbWVwaWNrZXJGb3JtYXRUeXBlID0gMjQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgb25UaW1lU2VsZWN0ZWQodGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ob3VyU2VsZWN0ZWQubmV4dCh0aW1lKTtcclxuICAgIH1cclxufVxyXG4iXX0=