import { Injectable, Pipe } from "@angular/core";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerMeasure } from "../models/ngx-mat-timepicker-measures.enum";
//
import { DateTime } from "ts-luxon";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker-locale.service";
export class NgxMatTimepickerParserPipe {
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    constructor(_timepickerLocaleSrv) {
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOptions().numberingSystem;
    }
    transform(time, timeUnit = NgxMatTimepickerUnits.HOUR) {
        if (time == null || time === "") {
            return "";
        }
        if (!isNaN(+time)) {
            return `${time}`;
        }
        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {
            return this._parseTime(time, "mm", NgxMatTimepickerMeasure.minute).toString();
        }
        return this._parseTime(time, "HH", NgxMatTimepickerMeasure.hour).toString();
    }
    _parseTime(time, format, timeMeasure) {
        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this._numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error(`Cannot parse time - ${time}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerParserPipe, deps: [{ token: i1.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerParserPipe, isStandalone: true, name: "ngxMatTimepickerParser" }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerParserPipe }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: NgxMatTimepickerParserPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: "ngxMatTimepickerParser",
                    standalone: true
                }]
        }, {
            type: Injectable
        }], ctorParameters: () => [{ type: i1.NgxMatTimepickerLocaleService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXBhcnNlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdC10aW1lcGlja2VyL3NyYy9saWIvcGlwZXMvbmd4LW1hdC10aW1lcGlja2VyLXBhcnNlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxFQUFFO0FBQ0YsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0seUNBQXlDLENBQUM7QUFDOUUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFFbkYsRUFBRTtBQUNGLE9BQU8sRUFBQyxRQUFRLEVBQWtCLE1BQU0sVUFBVSxDQUFDOzs7QUFPbkQsTUFBTSxPQUFPLDBCQUEwQjtJQUVuQyxJQUFZLE9BQU87UUFDZixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7SUFDNUMsQ0FBQztJQUlELFlBQW9CLG9CQUFtRDtRQUFuRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQStCO1FBQ25FLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLGVBQWtDLENBQUM7SUFDaEksQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFxQixFQUFFLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJO1FBQ2xFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDOUIsT0FBTyxFQUFFLENBQUM7UUFDZCxDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDaEIsT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3JCLENBQUM7UUFFRCxJQUFJLFFBQVEsS0FBSyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUM1QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsRixDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEYsQ0FBQztJQUVPLFVBQVUsQ0FBQyxJQUFxQixFQUFFLE1BQWMsRUFBRSxXQUFvQztRQUMxRixNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNwSCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDckIsT0FBTyxVQUFVLENBQUM7UUFDdEIsQ0FBQztRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs4R0FuQ1EsMEJBQTBCOzRHQUExQiwwQkFBMEI7a0hBQTFCLDBCQUEwQjs7MkZBQTFCLDBCQUEwQjtrQkFMdEMsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsd0JBQXdCO29CQUM5QixVQUFVLEVBQUUsSUFBSTtpQkFDbkI7O2tCQUNBLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbi8vXHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclVuaXRzfSBmcm9tIFwiLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci11bml0cy5lbnVtXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlck1lYXN1cmV9IGZyb20gXCIuLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLW1lYXN1cmVzLmVudW1cIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyTG9jYWxlU2VydmljZX0gZnJvbSBcIi4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci1sb2NhbGUuc2VydmljZVwiO1xyXG4vL1xyXG5pbXBvcnQge0RhdGVUaW1lLCBOdW1iZXJpbmdTeXN0ZW19IGZyb20gXCJ0cy1sdXhvblwiO1xyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogXCJuZ3hNYXRUaW1lcGlja2VyUGFyc2VyXCIsXHJcbiAgICBzdGFuZGFsb25lOiB0cnVlXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJQYXJzZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgX2xvY2FsZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lcGlja2VyTG9jYWxlU3J2LmxvY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9udW1iZXJpbmdTeXN0ZW06IE51bWJlcmluZ1N5c3RlbTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90aW1lcGlja2VyTG9jYWxlU3J2OiBOZ3hNYXRUaW1lcGlja2VyTG9jYWxlU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuX251bWJlcmluZ1N5c3RlbSA9IERhdGVUaW1lLmxvY2FsKCkuc2V0TG9jYWxlKHRoaXMuX2xvY2FsZSkucmVzb2x2ZWRMb2NhbGVPcHRpb25zKCkubnVtYmVyaW5nU3lzdGVtIGFzIE51bWJlcmluZ1N5c3RlbTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2Zvcm0odGltZTogc3RyaW5nIHwgbnVtYmVyLCB0aW1lVW5pdCA9IE5neE1hdFRpbWVwaWNrZXJVbml0cy5IT1VSKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGltZSA9PSBudWxsIHx8IHRpbWUgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWlzTmFOKCt0aW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7dGltZX1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRpbWVVbml0ID09PSBOZ3hNYXRUaW1lcGlja2VyVW5pdHMuTUlOVVRFKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJzZVRpbWUodGltZSwgXCJtbVwiLCBOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZS5taW51dGUpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fcGFyc2VUaW1lKHRpbWUsIFwiSEhcIiwgTmd4TWF0VGltZXBpY2tlck1lYXN1cmUuaG91cikudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9wYXJzZVRpbWUodGltZTogc3RyaW5nIHwgbnVtYmVyLCBmb3JtYXQ6IHN0cmluZywgdGltZU1lYXN1cmU6IE5neE1hdFRpbWVwaWNrZXJNZWFzdXJlKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBwYXJzZWRUaW1lID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChTdHJpbmcodGltZSksIGZvcm1hdCwge251bWJlcmluZ1N5c3RlbTogdGhpcy5fbnVtYmVyaW5nU3lzdGVtfSlbdGltZU1lYXN1cmVdO1xyXG4gICAgICAgIGlmICghaXNOYU4ocGFyc2VkVGltZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFRpbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBwYXJzZSB0aW1lIC0gJHt0aW1lfWApO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=