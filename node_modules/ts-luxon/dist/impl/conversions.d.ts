import { TimeObject, WeekDateTime, GregorianDateTime, OrdinalDateTime, GenericDateTimeExtended } from "../types/datetime";
import { Invalid } from "../types/invalid";
import { Locale } from "./locale";
export declare function dayOfWeek(year: number, month: number, day: number): number;
export declare function gregorianToWeek(gregObj: GregorianDateTime, minDaysInFirstWeek?: number, startOfWeek?: number): WeekDateTime;
export declare function weekToGregorian(weekData: WeekDateTime, minDaysInFirstWeek?: number, startOfWeek?: number): GregorianDateTime;
export declare function gregorianToOrdinal(gregData: GregorianDateTime): OrdinalDateTime;
export declare function ordinalToGregorian(ordinalData: OrdinalDateTime): GregorianDateTime;
export declare function hasInvalidWeekData(obj: WeekDateTime, minDaysInFirstWeek?: number, startOfWeek?: number): Invalid | false;
export declare function hasInvalidOrdinalData(obj: OrdinalDateTime): Invalid | false;
export declare function hasInvalidGregorianData(obj: GregorianDateTime): Invalid | false;
export declare function hasInvalidTimeData(obj: TimeObject): Invalid | false;
export declare function isoWeekdayToLocal(isoWeekday: number, startOfWeek: number): number;
/**
 * Check if local week units like localWeekday are used in obj.
 * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.
 * Modifies obj in-place!
 * @param obj the object values
 * @param loc
 */
export declare function usesLocalWeekValues(obj: GenericDateTimeExtended, loc: Locale): {
    minDaysInFirstWeek: number;
    startOfWeek: number;
};
