import { TimeObject, GregorianDateTime, GenericDateTimeExtended } from "../types/datetime";
import { ZoneOffsetFormat } from "../types/zone";
import { NormalizedDurationUnit, NormalizedHumanDurationUnit } from "../types/duration";
import { WeekSettings } from "../types/locale";
/**
 * @private
 */
export declare function isDefined(o: unknown): boolean;
export declare function isUndefined(o: unknown): o is undefined;
export declare function isNumber(o: unknown): o is number;
export declare function isInteger(o: unknown): boolean;
export declare function isString(o: unknown): o is string;
export declare function isDate(o: unknown): o is Date;
export declare function hasRelative(): boolean;
export declare function hasLocaleWeekInfo(): boolean;
export declare function maybeArray<T>(thing: T | T[]): T[];
export declare function bestBy<T, U>(arr: T[], by: (a: T) => U, compare: (a: U, b: U) => U): T | void;
export declare function pick<T, K extends keyof T>(obj: T, keys: K[]): Pick<T, K>;
export declare function validateWeekSettings(settings?: WeekSettings | void): WeekSettings | void;
export declare function integerBetween(thing: number, bottom: number, top: number): boolean;
export declare function floorMod(x: number, n: number): number;
export declare function padStart(input: string | number, n?: number): string;
export declare function parseInteger(text: string): number | undefined;
export declare function parseFloating(text: string): number | undefined;
export declare function parseMillis(fraction: string | null | undefined): number;
export declare function roundTo(value: number, digits: number, towardZero?: boolean): number;
export declare function isLeapYear(year: number): boolean;
export declare function daysInYear(year: number): 366 | 365;
export declare function daysInMonth(year: number, month: number): number;
export declare function objToLocalTS(obj: GregorianDateTime): number;
export declare function weeksInWeekYear(weekYear: number, minDaysInFirstWeek?: number, startOfWeek?: number): number;
export declare function untruncateYear(year: number): number;
export declare function parseZoneInfo(ts: number, offsetFormat?: string, locale?: string, timeZone?: string): string;
export declare function signedOffset(offHourStr: string, offMinuteStr: string): number;
export declare function asNumber(value: unknown): number;
export declare function normalizeObject(obj: Record<string, unknown>, normalizer: (key: string) => string | number): {
    [key: string]: number;
};
/**
 * Returns the offset's value as a string
 * @param {number} offset - Epoch milliseconds for which to get the offset
 * @param {string} format - What style of offset to return.
 *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
 * @return {string}
 */
export declare function formatOffset(offset: number, format: ZoneOffsetFormat): string;
export declare function timeObject(obj: TimeObject): TimeObject;
export declare const ORDERED_UNITS: NormalizedDurationUnit[];
export declare const REVERSE_ORDERED_UNITS: NormalizedDurationUnit[];
export declare const HUMAN_ORDERED_UNITS: NormalizedHumanDurationUnit[];
export declare const PLURAL_MAPPING: Record<string, keyof GenericDateTimeExtended>;
export declare const FALLBACK_WEEK_SETTINGS: WeekSettings;
