class TsLuxonError extends Error{}class InvalidDateTimeError extends TsLuxonError{constructor(e){super("Invalid DateTime: "+e.toMessage())}}class InvalidDurationError extends TsLuxonError{constructor(e){super("Invalid Duration: "+e.toMessage())}}class InvalidIntervalError extends TsLuxonError{constructor(e){super("Invalid Interval: "+e.toMessage())}}class InvalidUnitError extends TsLuxonError{constructor(e){super("Invalid unit "+e),Object.setPrototypeOf(this,InvalidUnitError.prototype)}}class InvalidZoneError extends TsLuxonError{constructor(e){super(e+" is an invalid or unknown zone specifier"),Object.setPrototypeOf(this,InvalidZoneError.prototype)}}class ConflictingSpecificationError extends TsLuxonError{constructor(e){super(e),Object.setPrototypeOf(this,ConflictingSpecificationError.prototype)}}class InvalidArgumentError extends TsLuxonError{constructor(e){super(e),Object.setPrototypeOf(this,InvalidArgumentError.prototype)}}class ZoneIsAbstractError extends TsLuxonError{constructor(){super("Zone is an abstract class"),Object.setPrototypeOf(this,ZoneIsAbstractError.prototype)}}function silenceUnusedWarning(...e){e.length}class Zone{get type(){throw new ZoneIsAbstractError}get ianaName(){return this.name}get name(){throw new ZoneIsAbstractError}get isUniversal(){throw new ZoneIsAbstractError}offsetName(e,t){throw silenceUnusedWarning(e,t),new ZoneIsAbstractError}formatOffset(e,t){throw silenceUnusedWarning(e,t),new ZoneIsAbstractError}offset(e){throw silenceUnusedWarning(e),new ZoneIsAbstractError}equals(e){throw silenceUnusedWarning(e),new ZoneIsAbstractError}get isValid(){throw new ZoneIsAbstractError}}var Intl$1=Intl;let dtfCache={};function makeDTF(t){if(!dtfCache[t])try{dtfCache[t]=new Intl$1.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})}catch(e){throw new InvalidZoneError(t)}return dtfCache[t]}const typeToPos={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};function hackyOffset(e,t){var e=e.format(t).replace(/\u200E/g,""),[,t,e,r,n,i,a,s]=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(e);return[r,t,e,n,i,a,s]}function partsOffset(e,t){var r=e.formatToParts(t),n=[];for(let e=0;e<r.length;e++){var{type:i,value:a}=r[e],s=typeToPos[i];"era"===i?n[s]=a:isUndefined(s)||(n[s]=parseInt(a,10))}return n}let ianaZoneCache={};class IANAZone extends Zone{static create(e){return ianaZoneCache[e]||(ianaZoneCache[e]=new IANAZone(e)),ianaZoneCache[e]}static resetCache(){ianaZoneCache={},dtfCache={}}static isValidSpecifier(e){return this.isValidZone(e)}static isValidZone(e){if(!e)return!1;try{return new Intl$1.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch(e){return!1}}constructor(e){super(),this._zoneName=e,this._valid=IANAZone.isValidZone(e)}get type(){return"iana"}get name(){return this._zoneName}get isUniversal(){return!1}offsetName(e,{format:t,locale:r}={}){return parseZoneInfo(e,t,r,this.name)}formatOffset(e,t){return formatOffset(this.offset(e),t)}offset(e){e=new Date(e);if(isNaN(+e))return NaN;var t=makeDTF(this.name);let r;var[t,n,i,a,s,o,l]=(typeof t.formatToParts==typeof isNaN?partsOffset:hackyOffset)(t,e),s=24===s?0:s,e=+e,u=e%1e3;return(objToLocalTS({year:(r="BC"===a?1-Math.abs(+t):r)||+t,month:+n,day:+i,hour:+s,minute:+o,second:+l,millisecond:0})-(e-=0<=u?u:1e3+u))/6e4}equals(e){return"iana"===e.type&&e.name===this.name}get isValid(){return this._valid}}function __rest(e,t){var r={};for(i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(r[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var n=0,i=Object.getOwnPropertySymbols(e);n<i.length;n++)t.indexOf(i[n])<0&&Object.prototype.propertyIsEnumerable.call(e,i[n])&&(r[i[n]]=e[i[n]]);return r}const n="numeric",s="short",l="long",DATE_SHORT={year:n,month:n,day:n},DATE_MED={year:n,month:s,day:n},DATE_MED_WITH_WEEKDAY={year:n,month:s,day:n,weekday:s},DATE_FULL={year:n,month:l,day:n},DATE_HUGE={year:n,month:l,day:n,weekday:l},TIME_SIMPLE={hour:n,minute:n},TIME_WITH_SECONDS={hour:n,minute:n,second:n},TIME_WITH_SHORT_OFFSET={hour:n,minute:n,second:n,timeZoneName:s},TIME_WITH_LONG_OFFSET={hour:n,minute:n,second:n,timeZoneName:l},TIME_24_SIMPLE={hour:n,minute:n,hourCycle:"h23"},TIME_24_WITH_SECONDS={hour:n,minute:n,second:n,hourCycle:"h23"},TIME_24_WITH_SHORT_OFFSET={hour:n,minute:n,second:n,hourCycle:"h23",timeZoneName:s},TIME_24_WITH_LONG_OFFSET={hour:n,minute:n,second:n,hourCycle:"h23",timeZoneName:l},DATETIME_SHORT={year:n,month:n,day:n,hour:n,minute:n},DATETIME_SHORT_WITH_SECONDS={year:n,month:n,day:n,hour:n,minute:n,second:n},DATETIME_MED={year:n,month:s,day:n,hour:n,minute:n},DATETIME_MED_WITH_SECONDS={year:n,month:s,day:n,hour:n,minute:n,second:n},DATETIME_MED_WITH_WEEKDAY={year:n,month:s,day:n,weekday:s,hour:n,minute:n},DATETIME_FULL={year:n,month:l,day:n,hour:n,minute:n,timeZoneName:s},DATETIME_FULL_WITH_SECONDS={year:n,month:l,day:n,hour:n,minute:n,second:n,timeZoneName:s},DATETIME_HUGE={year:n,month:l,day:n,weekday:l,hour:n,minute:n,timeZoneName:l},DATETIME_HUGE_WITH_SECONDS={year:n,month:l,day:n,weekday:l,hour:n,minute:n,second:n,timeZoneName:l},monthsLong=["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],monthsNarrow=["J","F","M","A","M","J","J","A","S","O","N","D"];function months(e){switch(e){case"narrow":return[...monthsNarrow];case"short":return[...monthsShort];case"long":return[...monthsLong];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"]}}const weekdaysLong=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],weekdaysShort=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],weekdaysNarrow=["M","T","W","T","F","S","S"];function weekdays(e){switch(e){case"narrow":return[...weekdaysNarrow];case"short":return[...weekdaysShort];case"long":return[...weekdaysLong];case"numeric":return["1","2","3","4","5","6","7"]}}const meridiems=["AM","PM"],erasLong=["Before Christ","Anno Domini"],erasShort=["BC","AD"],erasNarrow=["B","A"];function eras(e){switch(e){case"narrow":return[...erasNarrow];case"short":return[...erasShort];case"long":return[...erasLong]}}function meridiemForDateTime(e){return meridiems[e.hour<12?0:1]}function weekdayForDateTime(e,t){return weekdays(t)[e.weekday-1]}function monthForDateTime(e,t){return months(t)[e.month-1]}function eraForDateTime(e,t){return eras(t)[e.year<0?0:1]}function formatRelativeTime(e,t,r="always",n=!1){var e=Duration.normalizeUnit(e),i={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."],milliseconds:[]}[e],a=-1===["hours","minutes","seconds"].indexOf(e);if("auto"===r&&a){var s="days"===e;switch(t){case 1:return s?"tomorrow":"next "+i[0];case-1:return s?"yesterday":"last "+i[0];case 0:return s?"today":"this "+i[0]}}r=Object.is(t,-0)||t<0,a=Math.abs(t),t=1===a,n=n?!t&&i[2]||i[1]:t?i[0]:e;return r?a+` ${n} ago`:`in ${a} `+n}let intlLFCache={};function getCachedLF(e,t={}){var r=JSON.stringify([e,t]);let n=intlLFCache[r];return n||(n=new Intl$1.ListFormat(e,t),intlLFCache[r]=n),n}let intlDTCache={};function getCachedDTF(e,t={}){var r=JSON.stringify([e,t]);let n=intlDTCache[r];return n||(n=new Intl$1.DateTimeFormat(e,t),intlDTCache[r]=n),n}let intlNumCache={};function getCachedINF(e,t){var r=JSON.stringify([e,t]);let n=intlNumCache[r];return n||(n=new Intl$1.NumberFormat(e,t),intlNumCache[r]=n),n}let intlRelCache={};function getCachedRTF(e,t={}){var r=JSON.stringify([e,t]);let n=intlRelCache[r];return n||(n=new Intl$1.RelativeTimeFormat(e,t),intlRelCache[r]=n),n}let sysLocaleCache;function systemLocale(){return sysLocaleCache=sysLocaleCache||(new Intl$1.DateTimeFormat).resolvedOptions().locale}function parseLocaleString(n){var i=n.indexOf("-x-"),i=(n=-1!==i?n.substring(0,i):n).indexOf("-u-");if(-1===i)return[n];{let t,r;try{t=getCachedDTF(n).resolvedOptions(),r=n}catch(e){n=n.substring(0,i);t=getCachedDTF(n).resolvedOptions(),r=n}var{numberingSystem:i,calendar:n}=t;return[r,i,n]}}function intlConfigString(e,t,r){return(r||t)&&(e.includes("-u-")||(e+="-u"),r&&(e+="-ca-"+r),t)&&(e+="-nu-"+t),e}function mapMonths(t){var r=[];for(let e=1;e<=12;e++){var n=DateTime.utc(2009,e,1);r.push(t(n))}return r}function mapWeekdays(t){var r=[];for(let e=1;e<=7;e++){var n=DateTime.utc(2016,11,13+e);r.push(t(n))}return r}function listStuff(e,t,r,n){return("en"===e.listingMode()?r:n)(t)}class PolyNumberFormatter{constructor(e,t,r){var{padTo:n,floor:i}=r,a=__rest(r,["padTo","floor"]);this._padTo=n||0,this._floor=i||!1,(!t||0<Object.keys(a).length)&&(i=Object.assign({useGrouping:!1},r),0<this._padTo&&(i.minimumIntegerDigits=n),this._inf=getCachedINF(e,i))}format(e){var t;return this._inf?(t=this._floor?Math.floor(e):e,this._inf.format(t)):padStart(this._floor?Math.floor(e):roundTo(e,3),this._padTo)}}class PolyDateFormatter{get dtf(){return this._dtf}constructor(e,t,r){this._opts=r;let n;this._opts.timeZone?this._dt=e:"fixed"===e.zone.type?(r=0<=(r=e.offset/60*-1)?"Etc/GMT+"+r:"Etc/GMT"+r,0!==e.offset&&IANAZone.create(r).isValid?(n=r,this._dt=e):(n="UTC",this._dt=0===e.offset?e:e.setZone("UTC").plus({minutes:e.offset}),this._originalZone=e.zone)):"system"===e.zone.type?this._dt=e:"iana"===e.zone.type?(this._dt=e,n=e.zone.name):(n="UTC",this._dt=e.setZone("UTC").plus({minutes:e.offset}),this._originalZone=e.zone);r=Object.assign(Object.assign({},this._opts),{timeZone:this._opts.timeZone||n});this._dtf=getCachedDTF(t,r)}format(){return this._originalZone?this.formatToParts().map(({value:e})=>e).join(""):this.dtf.format(this._dt.toJSDate())}formatToParts(){var e=this.dtf.formatToParts(this._dt.toJSDate());return this._originalZone?e.map(e=>{var t;return"timeZoneName"===e.type?(t=this._originalZone.offsetName(this._dt.ts,{locale:this._dt.locale,format:this._opts.timeZoneName}),Object.assign(Object.assign({},e),{value:t})):e}):e}resolvedOptions(){return this._dtf.resolvedOptions()}}class PolyRelFormatter{constructor(e,t,r){this._opts=Object.assign({style:"long"},r),!t&&hasRelative()&&(this._rtf=getCachedRTF(e,r))}format(e,t){return this._rtf?this._rtf.format(e,t):formatRelativeTime(t,e,this._opts.numeric,"long"!==this._opts.style)}formatToParts(e,t){return this._rtf?this._rtf.formatToParts(e,t):[]}}class Locale{get fastNumbers(){return void 0===this._fastNumbersCached&&(this._fastNumbersCached=this._supportsFastNumbers()),this._fastNumbersCached}constructor(e,t,r,n,i){var[e,a,s]=parseLocaleString(e);this.locale=e,this.numberingSystem=t||a,this.outputCalendar=r||s,this._intl=intlConfigString(this.locale,this.numberingSystem,this.outputCalendar),this._weekSettings=n,this._weekdaysCache={format:{},standalone:{}},this._monthsCache={format:{},standalone:{}},this._meridiemCache=void 0,this._eraCache={},this._specifiedLocale=i,this._fastNumbersCached=void 0}static create(e,t,r,n,i=!1){e=e||Settings.defaultLocale,i=e||(i?"en-US":systemLocale()),t=t||Settings.defaultNumberingSystem,r=r||Settings.defaultOutputCalendar,n=validateWeekSettings(n)||Settings.defaultWeekSettings;return new Locale(i,t,r,n,e)}static fromObject({locale:e,numberingSystem:t,outputCalendar:r,weekSettings:n}={}){return Locale.create(e,t,r,n)}static fromOpts(e){return Locale.create(e.locale,e.numberingSystem,e.outputCalendar,e.weekSettings,e.defaultToEN)}static resetCache(){sysLocaleCache=void 0,intlLFCache={},intlDTCache={},intlNumCache={},intlRelCache={}}clone(e){return e&&0!==Object.getOwnPropertyNames(e).length?Locale.create(e.locale||this._specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,validateWeekSettings(e.weekSettings)||this._weekSettings,e.defaultToEN||!1):this}dtFormatter(e,t={}){return new PolyDateFormatter(e,this._intl,t)}equals(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar}eras(e){return listStuff(this,e,eras,e=>{const t={era:e};return this._eraCache[e]||(this._eraCache[e]=[DateTime.utc(-40,1,1),DateTime.utc(2017,1,1)].map(e=>this.extract(e,t,"era"))),this._eraCache[e]})}extract(e,t,r){e=this.dtFormatter(e,t).formatToParts().find(e=>e.type.toLowerCase()===r.toLowerCase());if(e)return e.value;throw new Error("Invalid extract field "+r)}getMinDaysInFirstWeek(){return this.getWeekSettings().minimalDays}getStartOfWeek(){return this.getWeekSettings().firstDay}getWeekSettings(){return this._weekSettings||(hasLocaleWeekInfo()?this._getCachedWeekInfo(this.locale):FALLBACK_WEEK_SETTINGS)}getWeekendDays(){return this.getWeekSettings().weekend}isEnglish(){return!!~["en","en-us"].indexOf(this.locale.toLowerCase())||new Intl$1.DateTimeFormat(this._intl).resolvedOptions().locale.startsWith("en-us")}listFormatter(e={}){return getCachedLF(this._intl,e)}listingMode(){var e=this.isEnglish(),t=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return e&&t?"en":"intl"}meridiems(){return listStuff(this,"long",()=>meridiems,()=>(void 0===this._meridiemCache&&(this._meridiemCache=[DateTime.utc(2016,11,13,9),DateTime.utc(2016,11,13,19)].map(e=>this.extract(e,{hour:"numeric",hourCycle:"h12"},"dayPeriod"))),this._meridiemCache))}months(e,n=!1){return listStuff(this,e,months,e=>{const t=n?{month:e,day:"numeric"}:{month:e};var r=n?"format":"standalone";return this._monthsCache[r][e]||(this._monthsCache[r][e]=mapMonths(e=>this.extract(e,t,"month"))),this._monthsCache[r][e]})}numberFormatter(e={}){return new PolyNumberFormatter(this._intl,this.fastNumbers,e)}redefaultToEN(e={}){return this.clone(Object.assign(Object.assign({},e),{defaultToEN:!0}))}redefaultToSystem(e={}){return this.clone(Object.assign(Object.assign({},e),{defaultToEN:!1}))}relFormatter(e={}){return new PolyRelFormatter(this._intl,this.isEnglish(),e)}toString(){return`Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`}weekdays(e,n=!1){return listStuff(this,e,weekdays,e=>{const t=n?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e};var r=n?"format":"standalone";return this._weekdaysCache[r][e]||(this._weekdaysCache[r][e]=mapWeekdays(e=>this.extract(e,t,"weekday"))),this._weekdaysCache[r][e]})}_getCachedWeekInfo(e){let t=Locale._weekInfoCache[e];var r;return t||(r=new Intl$1.Locale(e),t="getWeekInfo"in r?r.getWeekInfo():r.weekInfo,Locale._weekInfoCache[e]=t),t}_supportsFastNumbers(){return(!this.numberingSystem||"latn"===this.numberingSystem)&&("latn"===this.numberingSystem||!this.locale||this.locale.startsWith("en")||"latn"===Intl$1.DateTimeFormat(this._intl).resolvedOptions().numberingSystem)}}Locale._weekInfoCache={};let singleton$1=null;class FixedOffsetZone extends Zone{static get utcInstance(){return singleton$1=null===singleton$1?new FixedOffsetZone(0):singleton$1}get ianaName(){return 0===this._fixed?"Etc/UTC":"Etc/GMT"+formatOffset(-this._fixed,"narrow")}get isUniversal(){return!0}get isValid(){return!0}get name(){return 0===this._fixed?"UTC":"UTC"+formatOffset(this._fixed,"narrow")}get type(){return"fixed"}constructor(e){super(),this._fixed=e}static instance(e){return 0===e?FixedOffsetZone.utcInstance:new FixedOffsetZone(e)}static parseSpecifier(e){if(e){e=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(e)return new FixedOffsetZone(signedOffset(e[1],e[2]))}return null}equals(e){return"fixed"===e.type&&e._fixed===this._fixed}formatOffset(e,t){return formatOffset(this._fixed,t)}offset(){return this._fixed}offsetName(){return this.name}}class InvalidZone extends Zone{constructor(e){super(),this._zoneName=e,Object.setPrototypeOf(this,InvalidZone.prototype)}get type(){return"invalid"}get name(){return this._zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}let singleton=null;class SystemZone extends Zone{static get instance(){return singleton=null===singleton?new SystemZone:singleton}get type(){return"system"}get name(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(e,{format:t,locale:r}){return parseZoneInfo(e,t,r)}formatOffset(e,t){return formatOffset(this.offset(e),t)}offset(e){return-new Date(e).getTimezoneOffset()}equals(e){return"system"===e.type}get isValid(){return!0}}const normalizeZone=(e,t)=>{var r;return isUndefined(e)||null===e?t:e instanceof Zone?e:isString(e)?"default"===(r=e.toLowerCase())?t:"local"===r||"system"===r?SystemZone.instance:"utc"===r||"gmt"===r?FixedOffsetZone.utcInstance:FixedOffsetZone.parseSpecifier(r)||IANAZone.create(e):isNumber(e)?FixedOffsetZone.instance(e):"object"==typeof e&&"offset"in e&&"function"==typeof e.offset?e:new InvalidZone(e)},numberingSystems={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},numberingSystemsUTF16={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},hanidecChars=numberingSystems.hanidec.replace(/[\[|\]]/g,"").split("");function parseDigits(t){var e=parseInt(t,10);if(!isNaN(e))return e;let r="";for(let e=0;e<t.length;e++){var n=t.charCodeAt(e);if(-1!==t[e].search(numberingSystems.hanidec))r+=hanidecChars.indexOf(t[e]);else for(const s in numberingSystemsUTF16){var[i,a]=numberingSystemsUTF16[s];if(i<=n&&n<=a){r+=n-i;break}}}return parseInt(r,10)}let digitRegexCache={};function resetDigitRegexCache(){digitRegexCache={}}function digitRegex({numberingSystem:e},t=""){e=e||"latn";return digitRegexCache[e]||(digitRegexCache[e]={}),digitRegexCache[e][t]||(digitRegexCache[e][t]=new RegExp(""+numberingSystems[e]+t)),digitRegexCache[e][t]}let now=()=>Date.now(),defaultZone="system",defaultLocale,defaultNumberingSystem,defaultOutputCalendar,twoDigitCutoffYear=60,throwOnInvalid=!1,defaultWeekSettings;class Settings{static set defaultLocale(e){defaultLocale=e}static get defaultLocale(){return defaultLocale}static set defaultNumberingSystem(e){defaultNumberingSystem=e}static get defaultNumberingSystem(){return defaultNumberingSystem}static set defaultOutputCalendar(e){defaultOutputCalendar=e}static get defaultOutputCalendar(){return defaultOutputCalendar}static set defaultWeekSettings(e){defaultWeekSettings=validateWeekSettings(e)}static get defaultWeekSettings(){return defaultWeekSettings}static set defaultZone(e){defaultZone=e}static get defaultZone(){return normalizeZone(defaultZone,SystemZone.instance)}static set defaultZoneLike(e){defaultZone=e}static set now(e){now=e}static get now(){return now}static set throwOnInvalid(e){throwOnInvalid=e}static get throwOnInvalid(){return throwOnInvalid}static set twoDigitCutoffYear(e){twoDigitCutoffYear=e%100}static get twoDigitCutoffYear(){return twoDigitCutoffYear}static resetCaches(){Locale.resetCache(),IANAZone.resetCache(),DateTime.resetCache(),resetDigitRegexCache()}}class Invalid{constructor(e,t){this.reason=e,this.explanation=t,this._formattedExplanation="",t&&(this._formattedExplanation=": "+t)}toMessage(){return""+this.reason+this._formattedExplanation}}const nonLeapLadder=[0,31,59,90,120,151,181,212,243,273,304,334],leapLadder=[0,31,60,91,121,152,182,213,244,274,305,335];function unitOutOfRange(e,t){return new Invalid("unit out of range",`you specified ${t} (of type ${typeof t}) as a ${e}, which is invalid`)}function computeOrdinal(e,t,r){return r+(isLeapYear(e)?leapLadder:nonLeapLadder)[t-1]}function uncomputeOrdinal(e,t){var e=isLeapYear(e)?leapLadder:nonLeapLadder,r=e.findIndex(e=>e<t);return{month:r+1,day:t-e[r]}}function dayOfWeek(e,t,r){t=new Date(Date.UTC(e,t-1,r)),e<100&&0<=e&&t.setUTCFullYear(t.getUTCFullYear()-1900),r=t.getUTCDay();return 0===r?7:r}function gregorianToWeek(e,t=FALLBACK_WEEK_SETTINGS.minimalDays,r=FALLBACK_WEEK_SETTINGS.firstDay){var{year:n,month:i,day:a}=e,s=computeOrdinal(n,i,a),i=isoWeekdayToLocal(dayOfWeek(n,i,a),r);let o=Math.floor((s-i+14-t)/7),l;return o<1?(l=n-1,o=weeksInWeekYear(l,t,r)):o>weeksInWeekYear(n,t,r)?(l=n+1,o=1):l=n,Object.assign({weekYear:l,weekNumber:o,weekday:i},timeObject(e))}function weekToGregorian(e,t=FALLBACK_WEEK_SETTINGS.minimalDays,r=FALLBACK_WEEK_SETTINGS.firstDay){var{weekYear:n,weekNumber:i,weekday:a}=e,r=isoWeekdayToLocal(dayOfWeek(n,1,t),r),s=daysInYear(n);let o=7*i+a-r-7+t,l;o<1?(l=n-1,o+=daysInYear(l)):o>s?(l=n+1,o-=daysInYear(n)):l=n;var{month:i,day:a}=uncomputeOrdinal(l,o);return Object.assign({year:l,month:i,day:a},timeObject(e))}function gregorianToOrdinal(e){var{year:t,month:r,day:n}=e,r=computeOrdinal(t,r,n);return Object.assign({year:t,ordinal:r},timeObject(e))}function ordinalToGregorian(e){var{year:t,ordinal:r}=e,{month:r,day:n}=uncomputeOrdinal(t,r);return Object.assign({year:t,month:r,day:n},timeObject(e))}function hasInvalidWeekData(e,t=4,r=1){var n=isInteger(e.weekYear),t=integerBetween(e.weekNumber,1,weeksInWeekYear(e.weekYear,t,r)),r=integerBetween(e.weekday,1,7);return n?t?!r&&unitOutOfRange("weekday",e.weekday):unitOutOfRange("week",e.weekNumber):unitOutOfRange("weekYear",e.weekYear)}function hasInvalidOrdinalData(e){var t=isInteger(e.year),r=integerBetween(e.ordinal,1,daysInYear(e.year));return t?!r&&unitOutOfRange("ordinal",e.ordinal):unitOutOfRange("year",e.year)}function hasInvalidGregorianData(e){var t=isInteger(e.year),r=integerBetween(e.month,1,12),n=integerBetween(e.day,1,daysInMonth(e.year,e.month));return t?r?!n&&unitOutOfRange("day",e.day):unitOutOfRange("month",e.month):unitOutOfRange("year",e.year)}function hasInvalidTimeData(e){var{hour:e,minute:t,second:r,millisecond:n}=e,i=integerBetween(e,0,23)||24===e&&0===t&&0===r&&0===n,a=integerBetween(t,0,59),s=integerBetween(r,0,59),o=integerBetween(n,0,999);return i?a?s?!o&&unitOutOfRange("millisecond",n):unitOutOfRange("second",r):unitOutOfRange("minute",t):unitOutOfRange("hour",e)}function isoWeekdayToLocal(e,t){return(e-t+7)%7+1}function usesLocalWeekValues(e,t){if(isDefined(e.localWeekday)||isDefined(e.localWeekNumber)||isDefined(e.localWeekYear)){if(isDefined(e.weekday)||isDefined(e.weekNumber)||isDefined(e.weekYear))throw new ConflictingSpecificationError("Cannot mix locale-based week fields with ISO-based week fields");return isDefined(e.localWeekday)&&(e.weekday=e.localWeekday),isDefined(e.localWeekNumber)&&(e.weekNumber=e.localWeekNumber),isDefined(e.localWeekYear)&&(e.weekYear=e.localWeekYear),delete e.localWeekday,delete e.localWeekNumber,delete e.localWeekYear,{minDaysInFirstWeek:t.getMinDaysInFirstWeek(),startOfWeek:t.getStartOfWeek()}}return{minDaysInFirstWeek:FALLBACK_WEEK_SETTINGS.minimalDays,startOfWeek:FALLBACK_WEEK_SETTINGS.firstDay}}function isDefined(e){return void 0!==e}function isUndefined(e){return void 0===e}function isNumber(e){return"number"==typeof e}function isInteger(e){return isNumber(e)&&e%1==0}function isString(e){return"string"==typeof e}function isDate(e){return"[object Date]"===Object.prototype.toString.call(e)}function hasRelative(){try{return void 0!==Intl$1&&!!Intl$1.RelativeTimeFormat}catch(e){return!1}}function hasLocaleWeekInfo(){try{return void 0!==Intl$1&&!!Intl$1.Locale&&("weekInfo"in Intl$1.Locale.prototype||"getWeekInfo"in Intl$1.Locale.prototype)}catch(e){return!1}}function maybeArray(e){return Array.isArray(e)?e:[e]}function bestBy(e,r,n){if(0!==e.length)return e.reduce((e,t)=>{t=[r(t),t];return n(e[0],t[0])===e[0]?e:t},[r(e[0]),e[0]])[1]}function pick(r,e){return e.reduce((e,t)=>(e[t]=r[t],e),{})}function validateWeekSettings(e){if(e){if("object"!=typeof e)throw new InvalidArgumentError("Week settings must be an object");if(integerBetween(e.firstDay,1,7)&&integerBetween(e.minimalDays,1,7)&&Array.isArray(e.weekend)&&!e.weekend.some(e=>!integerBetween(e,1,7)))return{firstDay:e.firstDay,minimalDays:e.minimalDays,weekend:e.weekend};throw new InvalidArgumentError("Invalid week settings")}}function integerBetween(e,t,r){return isInteger(e)&&t<=e&&e<=r}function floorMod(e,t){return e-t*Math.floor(e/t)}function padStart(e,t=2){var r=+e<0?"-":"",e=r?-1*+e:e;let n;return r+(n=e.toString().length<t?("0".repeat(t)+e).slice(-t):e.toString())}function parseInteger(e){if(e)return parseInt(e,10)}function parseFloating(e){if(e)return parseFloat(e)}function parseMillis(e){if(!isUndefined(e)&&null!==e&&""!==e)return e=1e3*parseFloat("0."+e),Math.floor(e)}function roundTo(e,t,r=!1){t=Math.pow(10,t);return(r?Math.trunc:Math.round)(e*t)/t}function isLeapYear(e){return e%4==0&&(e%100!=0||e%400==0)}function daysInYear(e){return isLeapYear(e)?366:365}function daysInMonth(e,t){var r=floorMod(t-1,12)+1;return[31,isLeapYear(e+(t-r)/12)?29:28,31,30,31,30,31,31,30,31,30,31][r-1]}function objToLocalTS(e){let t=Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond);return e.year<100&&0<=e.year&&(t=new Date(t)).setUTCFullYear(e.year,e.month-1,e.day),+t}function firstWeekOffset(e,t,r){return-isoWeekdayToLocal(dayOfWeek(e,1,t),r)+t-1}function weeksInWeekYear(e,t=4,r=1){var n=firstWeekOffset(e,t,r),t=firstWeekOffset(e+1,t,r);return(daysInYear(e)-n+t)/7}function untruncateYear(e){return 99<e?e:e>Settings.twoDigitCutoffYear?1900+e:2e3+e}function parseZoneInfo(e,t,r,n){e=new Date(e),t=Object.assign({timeZoneName:t},{hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",timeZone:n}),n=new Intl$1.DateTimeFormat(r,t).formatToParts(e).find(e=>"timezonename"===e.type.toLowerCase());return n?n.value:null}function signedOffset(e,t){let r=parseInt(e,10);Number.isNaN(r)&&(r=0);e=parseInt(t,10)||0,t=r<0||Object.is(r,-0)?-e:e;return 60*r+t}function asNumber(e){var t=Number(e);if("boolean"==typeof e||""===e||Number.isNaN(t))throw new InvalidArgumentError("Invalid unit value "+e);return t}function normalizeObject(r,n){return Object.keys(r).reduce((e,t)=>(void 0!==r[t]&&null!==r[t]&&(e[n(t)]=asNumber(r[t])),e),{})}function formatOffset(e,t){var r=Math.trunc(Math.abs(e/60)),n=Math.trunc(Math.abs(e%60)),i=0<=e?"+":"-";switch(t){case"short":return i+padStart(r,2)+":"+padStart(n,2);case"narrow":return i+r+(0<n?":"+n:"");case"techie":return i+padStart(r,2)+padStart(n,2);default:throw new RangeError(`Value format ${t} is out of range for property format`)}}function timeObject(e){return pick(e,["hour","minute","second","millisecond"])}const ORDERED_UNITS=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],REVERSE_ORDERED_UNITS=ORDERED_UNITS.slice(0).reverse(),HUMAN_ORDERED_UNITS=["years","months","days","hours","minutes","seconds","milliseconds"],PLURAL_MAPPING={year:"year",years:"year",quarter:"quarter",quarters:"quarter",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",localweeknumber:"localWeekNumber",localweeknumbers:"localWeekNumber",localweekday:"localWeekday",localweekdays:"localWeekday",localweekyear:"localWeekYear",localweekyears:"localWeekYear",minute:"minute",minutes:"minute",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"},FALLBACK_WEEK_SETTINGS={firstDay:1,minimalDays:4,weekend:[6,7]};function stringifyTokens(e,t){let r="";for(const n of e)n.literal?r+=n.val:r+=t(n.val);return r}const TokenToFormatOpts={D:DATE_SHORT,DD:DATE_MED,DDD:DATE_FULL,DDDD:DATE_HUGE,t:TIME_SIMPLE,tt:TIME_WITH_SECONDS,ttt:TIME_WITH_SHORT_OFFSET,tttt:TIME_WITH_LONG_OFFSET,T:TIME_24_SIMPLE,TT:TIME_24_WITH_SECONDS,TTT:TIME_24_WITH_SHORT_OFFSET,TTTT:TIME_24_WITH_LONG_OFFSET,f:DATETIME_SHORT,ff:DATETIME_MED,fff:DATETIME_FULL,ffff:DATETIME_HUGE,F:DATETIME_SHORT_WITH_SECONDS,FF:DATETIME_MED_WITH_SECONDS,FFF:DATETIME_FULL_WITH_SECONDS,FFFF:DATETIME_HUGE_WITH_SECONDS};class Formatter{constructor(e,t){this._opts=t,this._loc=e,this._systemLoc=void 0}static create(e,t={}){return new Formatter(e,t)}static macroTokenToFormatOpts(e){return TokenToFormatOpts[e]}static parseFormat(t){let r=null,n="",i=!1;var a=[];for(let e=0;e<t.length;e++){var s=t.charAt(e);"'"===s?(0<n.length&&a.push({literal:i||/^\s+$/.test(n),val:n}),r=null,n="",i=!i):i||s===r?n+=s:(0<n.length&&a.push({literal:/^\s+$/.test(n),val:n}),n=s,r=s)}return 0<n.length&&a.push({literal:i||/^\s+$/.test(n),val:n}),a}dtFormatter(e,t={}){return this._loc.dtFormatter(e,Object.assign(Object.assign({},this._opts),t))}formatDateTime(e,t){return this.dtFormatter(e,t).format()}formatDateTimeFromString(r,e){const n="en"===this._loc.listingMode(),t=this._loc.outputCalendar&&"gregory"!==this._loc.outputCalendar,i=(e,t)=>this._loc.extract(r,e,t),a=e=>r.isOffsetFixed&&0===r.offset&&e.allowZ?"Z":r.isValid?r.zone.formatOffset(r.ts,e.format):"",s=()=>n?meridiemForDateTime(r):i({hour:"numeric",hourCycle:"h12"},"dayPeriod"),o=(e,t)=>n?monthForDateTime(r,e):i(t?{month:e}:{month:e,day:"numeric"},"month"),l=(e,t)=>n?weekdayForDateTime(r,e):i(t?{weekday:e}:{weekday:e,month:"long",day:"numeric"},"weekday"),u=e=>{var t=Formatter.macroTokenToFormatOpts(e);return t?this.formatWithSystemDefault(r,t):e},c=e=>n?eraForDateTime(r,e):i({era:e},"era");return stringifyTokens(Formatter.parseFormat(e),e=>{switch(e){case"S":return this.num(r.millisecond);case"u":case"SSS":return this.num(r.millisecond,3);case"s":return this.num(r.second);case"ss":return this.num(r.second,2);case"uu":return this.num(Math.floor(r.millisecond/10),2);case"uuu":return this.num(Math.floor(r.millisecond/100));case"m":return this.num(r.minute);case"mm":return this.num(r.minute,2);case"h":return this.num(r.hour%12==0?12:r.hour%12);case"hh":return this.num(r.hour%12==0?12:r.hour%12,2);case"H":return this.num(r.hour);case"HH":return this.num(r.hour,2);case"Z":return a({format:"narrow",allowZ:this._opts.allowZ});case"ZZ":return a({format:"short",allowZ:this._opts.allowZ});case"ZZZ":return a({format:"techie",allowZ:this._opts.allowZ});case"ZZZZ":return r.zone.offsetName(r.ts,{format:"short",locale:this._loc.locale})||"";case"ZZZZZ":return r.zone.offsetName(r.ts,{format:"long",locale:this._loc.locale})||"";case"z":return r.zoneName||"";case"a":return s();case"d":return t?i({day:"numeric"},"day"):this.num(r.day);case"dd":return t?i({day:"2-digit"},"day"):this.num(r.day,2);case"c":return this.num(r.weekday);case"ccc":return l("short",!0);case"cccc":return l("long",!0);case"ccccc":return l("narrow",!0);case"E":return this.num(r.weekday);case"EEE":return l("short",!1);case"EEEE":return l("long",!1);case"EEEEE":return l("narrow",!1);case"L":return t?i({month:"numeric",day:"numeric"},"month"):this.num(r.month);case"LL":return t?i({month:"2-digit",day:"numeric"},"month"):this.num(r.month,2);case"LLL":return o("short",!0);case"LLLL":return o("long",!0);case"LLLLL":return o("narrow",!0);case"M":return t?i({month:"numeric"},"month"):this.num(r.month);case"MM":return t?i({month:"2-digit"},"month"):this.num(r.month,2);case"MMM":return o("short",!1);case"MMMM":return o("long",!1);case"MMMMM":return o("narrow",!1);case"y":return t?i({year:"numeric"},"year"):this.num(r.year);case"yy":return t?i({year:"2-digit"},"year"):this.num(parseInt(r.year.toString().slice(-2),10),2);case"yyyy":return t?i({year:"numeric"},"year"):this.num(r.year,4);case"yyyyyy":return t?i({year:"numeric"},"year"):this.num(r.year,6);case"G":return c("short");case"GG":return c("long");case"GGGGG":return c("narrow");case"kk":return this.num(parseInt(r.weekYear.toString().slice(-2),10),2);case"kkkk":return this.num(r.weekYear,4);case"W":return this.num(r.weekNumber);case"WW":return this.num(r.weekNumber,2);case"o":return this.num(r.ordinal);case"ooo":return this.num(r.ordinal,3);case"q":return this.num(r.quarter);case"qq":return this.num(r.quarter,2);case"X":return this.num(Math.floor(r.ts/1e3));case"x":return this.num(r.ts);default:return u(e)}})}formatDateTimeParts(e,t){return this.dtFormatter(e,t).formatToParts()}formatDurationFromString(e,t){const r=e=>{switch(e[0]){case"S":return"milliseconds";case"s":return"seconds";case"m":return"minutes";case"h":return"hours";case"d":return"days";case"M":return"months";case"y":return"years";default:return}};var n,t=Formatter.parseFormat(t),i=t.reduce((e,{literal:t,val:r})=>t?e:e.concat(r),[]),e=e.shiftTo(...i.map(r).filter(e=>!!e));return stringifyTokens(t,(n=e,e=>{var t=r(e);return t?this.num(n.get(t),e.length):e}))}formatInterval(e,t={}){if(e.isValid)return this.dtFormatter(e.start,t).dtf.formatRange(e.start.toJSDate(),e.end.toJSDate());throw Error("Invalid Interval provided!")}formatWithSystemDefault(e,t){return void 0===this._systemLoc&&(this._systemLoc=this._loc.redefaultToSystem()),this._systemLoc.dtFormatter(e,Object.assign(Object.assign({},this._opts),t)).format()}num(e,t=0){var r;return this._opts.forceSimple?padStart(e,t):(r=Object.assign({},this._opts),0<t&&(r.padTo=t),this._loc.numberFormatter(r).format(e))}resolvedOptions(e,t={}){return this.dtFormatter(e,t).resolvedOptions()}}function combineRegexes(...e){e=e.reduce((e,t)=>e+t.source,"");return RegExp(`^${e}$`)}function combineExtractors(...e){return a=>e.reduce(([e,t,r],n)=>{var[n,r,i]=n(a,r);return[Object.assign(Object.assign({},e),n),r||t,i]},[{},null,1]).slice(0,2)}function parse(e,...t){if(null!=e)for(var[r,n]of t){r=r.exec(e);if(r)return n(r)}return[null,null]}function simpleParse(...i){return(e,t)=>{var r={};let n;for(n=0;n<i.length;n++)r[i[n]]=parseInteger(e[t+n]);return[r,null,t+n]}}const IANA_REGEX=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/,offsetRegex=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,isoExtendedZone=`(?:${offsetRegex.source}?(?:\\[(${IANA_REGEX.source})\\])?)?`,isoTimeBaseRegex=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,isoTimeRegex=RegExp(""+isoTimeBaseRegex.source+isoExtendedZone),isoTimeExtensionRegex=RegExp(`(?:T${isoTimeRegex.source})?`),isoYmdRegex=/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,isoWeekRegex=/(\d{4})-?W(\d\d)(?:-?(\d))?/,isoOrdinalRegex=/(\d{4})-?(\d{3})/,extractISOWeekData=simpleParse("weekYear","weekNumber","weekday"),extractISOOrdinalData=simpleParse("year","ordinal"),sqlYmdRegex=/(\d{4})-(\d\d)-(\d\d)/,sqlTimeRegex=RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${IANA_REGEX.source}))?`),sqlTimeExtensionRegex=RegExp(`(?: ${sqlTimeRegex.source})?`);function int(e,t,r){return isUndefined(e[t])?r:parseInteger(e[t])}function extractISOYmd(e,t){return[{year:int(e,t,0),month:int(e,t+1,1),day:int(e,t+2,1)},null,t+3]}function extractISOTime(e,t){return[{hour:int(e,t,0),minute:int(e,t+1,0),second:int(e,t+2,0),millisecond:parseMillis(e[t+3])},null,t+4]}function extractISOOffset(e,t){var r=!e[t]&&!e[t+1],e=signedOffset(e[t+1],e[t+2]);return[{},r?null:FixedOffsetZone.instance(e),t+3]}function extractIANAZone(e,t){return[{},e[t]?IANAZone.create(e[t]):null,t+1]}const isoTimeOnly=RegExp(`^T?${isoTimeBaseRegex.source}$`),isoDuration=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function extractISODuration(e){var[e,t,r,n,i,a,s,o,l]=e;const u=e.startsWith("-");var e=!!o&&o.startsWith("-"),c=(e,t=!1)=>"number"==typeof e&&(t||e&&u)?-e:e;return[{years:c(parseFloating(t)),months:c(parseFloating(r)),weeks:c(parseFloating(n)),days:c(parseFloating(i)),hours:c(parseFloating(a)),minutes:c(parseFloating(s)),seconds:c(parseFloating(o),"-0"===o),milliseconds:c(parseMillis(l),e)}]}const obsOffsets={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function fromStrings(e,t,r,n,i,a,s){let o;return e&&(o=3<e.length?weekdaysLong.indexOf(e)+1:weekdaysShort.indexOf(e)+1),{year:2===t.length?untruncateYear(parseInteger(t)):parseInteger(t),month:monthsShort.indexOf(r)+1,day:parseInteger(n),hour:parseInteger(i),minute:parseInteger(a),second:parseInteger(s),weekday:o}}const rfc2822=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function extractRFC2822(e){var[,e,t,r,n,i,a,s,o,l,u,c]=e,e=fromStrings(e,n,r,t,i,a,s);let d;return d=o?obsOffsets[o]:l?0:signedOffset(u,c),[e,new FixedOffsetZone(d)]}function preprocessRFC2822(e){return e.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}const rfc1123=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,rfc850=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,ascii=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function extractRFC1123Or850(e){var[,e,t,r,n,i,a,s]=e;return[fromStrings(e,n,r,t,i,a,s),FixedOffsetZone.utcInstance]}function extractASCII(e){var[,e,t,r,n,i,a,s]=e;return[fromStrings(e,s,t,r,n,i,a),FixedOffsetZone.utcInstance]}const isoYmdWithTimeExtensionRegex=combineRegexes(isoYmdRegex,isoTimeExtensionRegex),isoWeekWithTimeExtensionRegex=combineRegexes(isoWeekRegex,isoTimeExtensionRegex),isoOrdinalWithTimeExtensionRegex=combineRegexes(isoOrdinalRegex,isoTimeExtensionRegex),isoTimeCombinedRegex=combineRegexes(isoTimeRegex),extractISOYmdTimeAndOffset=combineExtractors(extractISOYmd,extractISOTime,extractISOOffset,extractIANAZone),extractISOWeekTimeAndOffset=combineExtractors(extractISOWeekData,extractISOTime,extractISOOffset,extractIANAZone),extractISOOrdinalDateAndTime=combineExtractors(extractISOOrdinalData,extractISOTime,extractISOOffset,extractIANAZone),extractISOTimeAndOffset=combineExtractors(extractISOTime,extractISOOffset,extractIANAZone);function parseHTTPDate(e){return parse(e,[rfc1123,extractRFC1123Or850],[rfc850,extractRFC1123Or850],[ascii,extractASCII])}function parseISODate(e){return parse(e,[isoYmdWithTimeExtensionRegex,extractISOYmdTimeAndOffset],[isoWeekWithTimeExtensionRegex,extractISOWeekTimeAndOffset],[isoOrdinalWithTimeExtensionRegex,extractISOOrdinalDateAndTime],[isoTimeCombinedRegex,extractISOTimeAndOffset])}function parseISODuration(e){return parse(e,[isoDuration,extractISODuration])}function parseISOTimeOnly(e){return parse(e,[isoTimeOnly,combineExtractors(extractISOTime)])}function parseRFC2822Date(e){return parse(preprocessRFC2822(e),[rfc2822,extractRFC2822])}const sqlYmdWithTimeExtensionRegex=combineRegexes(sqlYmdRegex,sqlTimeExtensionRegex),sqlTimeCombinedRegex=combineRegexes(sqlTimeRegex),extractISOTimeOffsetAndIANAZone=combineExtractors(extractISOTime,extractISOOffset,extractIANAZone);function parseSQL(e){return parse(e,[sqlYmdWithTimeExtensionRegex,extractISOYmdTimeAndOffset],[sqlTimeCombinedRegex,extractISOTimeOffsetAndIANAZone])}const lowOrderMatrix={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},casualMatrix=Object.assign({years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6}},lowOrderMatrix),daysInYearAccurate=365.2425,daysInMonthAccurate=30.436875,accurateMatrix=Object.assign({years:{quarters:4,months:12,weeks:daysInYearAccurate/7,days:daysInYearAccurate,hours:24*daysInYearAccurate,minutes:24*daysInYearAccurate*60,seconds:24*daysInYearAccurate*60*60,milliseconds:24*daysInYearAccurate*60*60*1e3},quarters:{months:3,weeks:daysInYearAccurate/28,days:daysInYearAccurate/4,hours:24*daysInYearAccurate/4,minutes:24*daysInYearAccurate*60/4,seconds:24*daysInYearAccurate*60*60/4,milliseconds:24*daysInYearAccurate*60*60*1e3/4},months:{weeks:daysInMonthAccurate/7,days:daysInMonthAccurate,hours:24*daysInMonthAccurate,minutes:24*daysInMonthAccurate*60,seconds:24*daysInMonthAccurate*60*60,milliseconds:24*daysInMonthAccurate*60*60*1e3}},lowOrderMatrix);function durationToMillis(e,t){var r;let n=null!=(r=t.milliseconds)?r:0;for(const i of REVERSE_ORDERED_UNITS.slice(1))t[i]&&(n+=t[i]*e[i].milliseconds);return n}function eq(e,t){return void 0===e||0===e?void 0===t||0===t:e===t}function normalizeValues(i,a){const s=durationToMillis(i,a)<0?-1:1;REVERSE_ORDERED_UNITS.reduce((e,t)=>{var r,n;return isUndefined(a[t])?e:(e&&(n=a[e]*s,r=i[t][e],n=Math.floor(n/r),a[t]+=n*s,a[e]-=n*r*s),t)},null),ORDERED_UNITS.reduce((e,t)=>{var r;return isUndefined(a[t])?e:(e&&(r=a[e]%1,a[e]-=r,a[t]+=r*i[e][t]),t)},null)}function removeZeroes(e={}){return Object.entries(e).reduce((e,[t,r])=>(0!==r&&(e[t]=r),e),{})}class Duration{static get _INVALID(){return"Invalid Duration"}get conversionAccuracy(){return this._conversionAccuracy}get days(){return this.isValid?this._values.days||0:NaN}get hours(){return this.isValid?this._values.hours||0:NaN}get invalidExplanation(){return this._invalid?this._invalid.explanation:null}get invalidReason(){return this._invalid?this._invalid.reason:null}get isValid(){return null===this._invalid}get locale(){return this.isValid?this._loc.locale:void 0}get matrix(){return this._matrix}get milliseconds(){return this.isValid?this._values.milliseconds||0:NaN}get minutes(){return this.isValid?this._values.minutes||0:NaN}get months(){return this.isValid?this._values.months||0:NaN}get numberingSystem(){return this.isValid?this._loc.numberingSystem:void 0}get quarters(){return this.isValid?this._values.quarters||0:NaN}get seconds(){return this.isValid?this._values.seconds||0:NaN}get weeks(){return this.isValid?this._values.weeks||0:NaN}get years(){return this.isValid?this._values.years||0:NaN}constructor(e){var t="longterm"===e.conversionAccuracy||!1;let r,n;r=t?(n="longterm",accurateMatrix):(n="casual",casualMatrix),e.matrix&&(r=e.matrix),this._values=e.values||{},this._loc=e.loc||Locale.create(),this._conversionAccuracy=n,this._invalid=e.invalid||null,this._matrix=r,this._isLuxonDuration=!0}static fromDurationLike(e){if(isNumber(e))return Duration.fromMillis(e);if(Duration.isDuration(e))return e;if("object"==typeof e)return Duration.fromObject(e);throw new InvalidArgumentError(`Unknown duration argument ${e} of type `+typeof e)}static fromISO(e,t){var[r]=parseISODuration(e);return r?Duration.fromObject(r,t):Duration.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromISOTime(e,t={}){var[r]=parseISOTimeOnly(e);return r?Duration.fromObject(r,t):Duration.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromMillis(e,t={}){return Duration.fromObject({milliseconds:e},t)}static fromObject(e,t={}){if(null==e||"object"!=typeof e)throw new InvalidArgumentError("Duration.fromObject: argument expected to be an object, got "+(null===e?"null":typeof e));return new Duration({values:normalizeObject(e,Duration.normalizeUnit),loc:Locale.fromObject(t),conversionAccuracy:t.conversionAccuracy,matrix:t.matrix})}static invalid(e,t){if(!e)throw new InvalidArgumentError("need to specify a reason the Duration is invalid");e=e instanceof Invalid?e:new Invalid(e,t);if(Settings.throwOnInvalid)throw new InvalidDurationError(e);return new Duration({invalid:e})}static isDuration(e){return!!e&&e._isLuxonDuration||!1}static normalizeUnit(e){var t={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",localWeekNumber:"localWeekNumbers",localWeekYear:"localWeekYears",localWeekday:"localWeekdays",localWeekNumbers:"localWeekNumbers",localWeekYears:"localWeekYears",localWeekdays:"localWeekdays",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e];if(t)return t;throw new InvalidUnitError(e)}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`Duration { values: ${JSON.stringify(this._values)} }`:`Duration { Invalid, reason: ${this.invalidReason} }`}as(e){return this.shiftTo(e).get(e)}equals(e){if(!this.isValid||!e.isValid)return!1;if(!this._loc.equals(e._loc))return!1;for(const t of ORDERED_UNITS)if(!eq(this._values[t],e._values[t]))return!1;return!0}get(e){return this[Duration.normalizeUnit(e)]}getMaxUnit(e=!1){e=e?HUMAN_ORDERED_UNITS:ORDERED_UNITS;const t=this.shiftTo(...e).toObject();return e.find(e=>0<(t[e]||0))||REVERSE_ORDERED_UNITS[0]}mapUnits(t){if(!this.isValid)return this;const r={};return Object.keys(this._values).forEach(e=>{r[e]=asNumber(t(this._values[e],e))}),this._clone(this,{values:r},!0)}minus(e){return this.isValid?(e=Duration.fromDurationLike(e),this.plus(e.negate())):this}negate(){if(!this.isValid)return this;const t={};return Object.keys(this._values).forEach(e=>{t[e]=0===this._values[e]?0:-this._values[e]}),this._clone(this,{values:t},!0)}normalize(){var e;return this.isValid?(e=this.toObject(),normalizeValues(this._matrix,e),this._clone(this,{values:e},!0)):this}plus(e){if(!this.isValid)return this;const t=Duration.fromDurationLike(e),r={};return ORDERED_UNITS.forEach(e=>{void 0===t._values[e]&&void 0===this._values[e]||(r[e]=t.get(e)+this.get(e))}),this._clone(this,{values:r},!0)}reconfigure({locale:e,numberingSystem:t,conversionAccuracy:r,matrix:n}={}){e=this._loc.clone({locale:e,numberingSystem:t});return this._clone(this,{loc:e,matrix:n,conversionAccuracy:r})}rescale(){var e;return this.isValid?(e=removeZeroes(this.normalize().shiftToAll().toObject()),this._clone(this,{values:e},!0)):this}set(e){return this.isValid?(e=Object.assign(Object.assign({},this._values),normalizeObject(e,Duration.normalizeUnit)),this._clone(this,{values:e})):this}shiftTo(...t){if(!this.isValid||0===t.length)return this;t=t.map(e=>Duration.normalizeUnit(e));const n={},i={},a=this.toObject();let s;return ORDERED_UNITS.forEach(r=>{if(0<=t.indexOf(r)){s=r;let t=0;Object.keys(i).forEach(e=>{t+=this._matrix[e][r]*i[e],i[e]=0}),isNumber(a[r])&&(t+=a[r]);var e=Math.trunc(t);n[r]=e,i[r]=(1e3*t-1e3*e)/1e3}else isNumber(a[r])&&(i[r]=a[r])}),Object.keys(i).forEach(e=>{var t=i[e];0!==t&&(n[s]+=e===s?t:t/this._matrix[s][e])}),this._clone(this,{values:n},!0).normalize()}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}toFormat(e,t={floor:!0}){t=Object.assign(Object.assign({},t),{floor:!1!==t.round&&!1!==t.floor});return this.isValid?Formatter.create(this._loc,t).formatDurationFromString(this,e):Duration._INVALID}toHuman(r={}){if(!this.isValid)return Duration._INVALID;var e=this.getMaxUnit(!0),t=r.onlyHumanUnits?HUMAN_ORDERED_UNITS:ORDERED_UNITS;const n=this.shiftTo(...t.slice(t.indexOf(e))).toObject();e=t.map(e=>{var t=n[e];return isUndefined(t)||0===t?null:this._loc.numberFormatter(Object.assign(Object.assign({style:"unit",unitDisplay:"long"},r),{unit:e.slice(0,-1)})).format(t)}).filter(e=>e),t=Object.assign({type:"conjunction",style:r.listStyle||"narrow"},r);return this._loc.listFormatter(t).format(e)}toISO(){if(!this.isValid)return null;let e="P";return 0!==this.years&&(e+=this.years+"Y"),0===this.months&&0===this.quarters||(e+=this.months+3*this.quarters+"M"),0!==this.weeks&&(e+=this.weeks+"W"),0!==this.days&&(e+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(e+="T"),0!==this.hours&&(e+=this.hours+"H"),0!==this.minutes&&(e+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(e+=roundTo(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===e&&(e+="T0S"),e}toISOTime(e={}){var t;return!this.isValid||(t=this.toMillis())<0||864e5<=t?null:(e=Object.assign(Object.assign({suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended"},e),{includeOffset:!1}),DateTime.fromMillis(t,{zone:"UTC"}).toISOTime(e))}toJSON(){return this.toISO()}toMillis(){return this.isValid?durationToMillis(this.matrix,this._values):NaN}toObject(){return this.isValid?Object.assign({},this._values):{}}toString(){return this.toISO()}valueOf(){return this.toMillis()}_clone(e,t,r=!1){r={values:r?t.values:Object.assign(Object.assign({},e._values),t.values||{}),loc:e._loc.clone(t.loc),conversionAccuracy:t.conversionAccuracy||e.conversionAccuracy,matrix:t.matrix||e.matrix};return new Duration(r)}}const INVALID$1="Invalid Interval";function validateStartEnd(e,t){if(e&&e.isValid){if(t&&t.isValid)return t<e?Interval.invalid("end before start",`The end of an interval must be after its start, but you had start=${e.toISO()} and end=`+t.toISO()):void 0;return Interval.invalid("missing or invalid end")}return Interval.invalid("missing or invalid start")}function friendlyDateTime(e){if(DateTime.isDateTime(e))return e;if(e&&e.valueOf&&isNumber(e.valueOf()))return DateTime.fromJSDate(e);if(e&&"object"==typeof e)return DateTime.fromObject(e);throw new InvalidArgumentError(`Unknown datetime argument: ${e}, of type `+typeof e)}class Interval{get end(){return this.isValid?this._e:null}get invalidReason(){return this._invalid?this._invalid.reason:null}get isValid(){return null===this.invalidReason}get start(){return this.isValid?this._s:null}constructor(e){this._s=e.start,this._e=e.end,this._invalid=e.invalid||null,this._isLuxonInterval=!0}static after(e,t){t=Duration.fromDurationLike(t),e=friendlyDateTime(e);return new Interval({start:e,end:e?e.plus(t):void 0})}static before(e,t){t=Duration.fromDurationLike(t),e=friendlyDateTime(e);return new Interval({start:e?e.minus(t):void 0,end:e})}static fromDateTimes(e,t){e=friendlyDateTime(e),t=friendlyDateTime(t);return validateStartEnd(e,t)||new Interval({start:e,end:t})}static fromISO(e,i={}){var[a,s]=(e||"").split("/",2);if(a&&s){let e,t;try{e=DateTime.fromISO(a,i),t=e.isValid}catch(s){t=!1}let r,n;try{r=DateTime.fromISO(s,i),n=r.isValid}catch(s){n=!1}if(t&&n)return Interval.fromDateTimes(e,r);if(t){var o=Duration.fromISO(s,i);if(o.isValid)return Interval.after(e,o)}else if(n){o=Duration.fromISO(a,i);if(o.isValid)return Interval.before(r,o)}}return Interval.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static invalid(e,t){if(!e)throw new InvalidArgumentError("need to specify a reason the Interval is invalid");e=e instanceof Invalid?e:new Invalid(e,t);if(Settings.throwOnInvalid)throw new InvalidIntervalError(e);return new Interval({invalid:e})}static isInterval(e){return!!e&&e._isLuxonInterval||!1}static merge(e){var[e,t]=e.sort((e,t)=>e._s.valueOf()-t._s.valueOf()).reduce(([e,t],r)=>t?t.overlaps(r)||t.abutsStart(r)?[e,t.union(r)]:[e.concat([t]),r]:[e,r],[[],null]);return t&&e.push(t),e}static xor(e){let t=null,r=0;var n=[],e=e.map(e=>[{time:e._s,type:"s"},{time:e._e,type:"e"}]);for(const i of Array.prototype.concat(...e).sort((e,t)=>+e.time-+t.time))r+="s"===i.type?1:-1,t=1===r?i.time:(t&&t.valueOf()!==i.time.valueOf()&&n.push(Interval.fromDateTimes(t,i.time)),null);return Interval.merge(n)}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`Interval { start: ${this._s.toISO()}, end: ${this._e.toISO()} }`:`Interval { Invalid, reason: ${this.invalidReason} }`}abutsEnd(e){return+e._e==+this._s}abutsStart(e){return+this._e==+e._s}contains(e){return this._s<=e&&this._e>e}count(e="milliseconds",t){if(!this.isValid)return NaN;var r=this.start.startOf(e,t);let n;return n=(n=null!=t&&t.useLocaleWeeks?this.end.reconfigure({locale:r.locale}):this.end).startOf(e,t),Math.floor(n.diff(r,e).get(e))+ +(n.valueOf()!==this.end.valueOf())}difference(...e){return Interval.xor([this].concat(e)).map(e=>this.intersection(e)).filter(e=>e&&!e.isEmpty())}divideEqually(e){return this.isValid?this.splitBy({milliseconds:this.length()/e}).slice(0,e):[]}engulfs(e){return!!this.isValid&&this._s<=e._s&&this._e>=e._e}equals(e){return!(!this.isValid||!e.isValid)&&this._s.equals(e._s)&&this._e.equals(e._e)}hasSame(e){return!!this.isValid&&(this.isEmpty()||this._e.minus(1).hasSame(this._s,e))}intersection(e){var t;return this.isValid?(t=(this._s>e._s?this:e)._s,(e=(this._e<e._e?this:e)._e)<=t?null:Interval.fromDateTimes(t,e)):this}isAfter(e){return!!this.isValid&&this._s>e}isBefore(e){return!!this.isValid&&this._e<=e}isEmpty(){return this._s.valueOf()===this._e.valueOf()}length(e="milliseconds"){return this.toDuration(e).get(e)}mapEndpoints(e){return Interval.fromDateTimes(e(this._s),e(this._e))}overlaps(e){return this._e>e._s&&this._s<e._e}set({start:e,end:t}={}){return this.isValid?Interval.fromDateTimes(e||this._s,t||this._e):this}splitAt(...e){var t=e.map(friendlyDateTime).filter(e=>this.contains(e)).sort((e,t)=>e.toMillis()-t.toMillis()),r=[];let n=this._s,i=0;for(;n<this._e;){var a=t[i]||this._e,a=+a>+this._e?this._e:a;r.push(Interval.fromDateTimes(n,a)),n=a,i+=1}return r}splitBy(e){var t=Duration.fromDurationLike(e);if(!this.isValid||!t.isValid||0===t.as("milliseconds"))return[];let r=this._s,n=1,i;for(var a=[];r<this._e;){var s=this.start.plus(t.mapUnits(e=>e*n));i=+s>+this._e?this._e:s,a.push(Interval.fromDateTimes(r,i)),r=i,n+=1}return a}toDuration(e="milliseconds",t={}){return this.isValid?this._e.diff(this._s,e,t):Duration.invalid(this._invalid.reason)}toFormat(e,{separator:t=" - "}={}){return this.isValid?""+this._s.toFormat(e)+t+this._e.toFormat(e):INVALID$1}toISO(e={}){return this.isValid?this._s.toISO(e)+"/"+this._e.toISO(e):INVALID$1}toISODate(){return this.isValid?this._s.toISODate()+"/"+this._e.toISODate():INVALID$1}toISOTime(e={}){return this.isValid?this._s.toISOTime(e)+"/"+this._e.toISOTime(e):INVALID$1}toLocaleString(e=DATE_SHORT,t={}){return this.isValid?Formatter.create(this._s.loc.clone(t),e).formatInterval(this):INVALID$1}toString(){return this.isValid?`[${this._s.toISO()} – ${this._e.toISO()})`:INVALID$1}union(e){var t;return this.isValid?(t=(this._s<e._s?this:e)._s,e=(this._e>e._e?this:e)._e,Interval.fromDateTimes(t,e)):this}}class Info{static eras(e="short",{locale:t}={}){return Locale.create(t,void 0,"gregory").eras(e)}static features(){return{relative:hasRelative(),localeWeek:hasLocaleWeekInfo()}}static getMinimumDaysInFirstWeek({locale:e,locObj:t}={}){return(t||Locale.create(e)).getMinDaysInFirstWeek()}static getStartOfWeek({locale:e,locObj:t}={}){return(t||Locale.create(e)).getStartOfWeek()}static getWeekendWeekdays({locale:e,locObj:t}={}){return(t||Locale.create(e)).getWeekendDays().slice()}static hasDST(e=Settings.defaultZone){var t=DateTime.now().setZone(e).set({month:12});return!e.isUniversal&&t.offset!==t.set({month:6}).offset}static isValidIANAZone(e){return IANAZone.isValidZone(e)}static meridiems({locale:e}={}){return Locale.create(e).meridiems()}static months(e="long",{locale:t=null,locObj:r=null,numberingSystem:n=null,outputCalendar:i="gregory"}={}){return(r||Locale.create(t,n,i)).months(e)}static monthsFormat(e="long",{locale:t,locObj:r,numberingSystem:n,outputCalendar:i="gregory"}={}){return(r||Locale.create(t,n,i)).months(e,!0)}static normalizeZone(e){return normalizeZone(e,Settings.defaultZone)}static weekdays(e="long",{locale:t,locObj:r,numberingSystem:n}={}){return(r||Locale.create(t,n)).weekdays(e)}static weekdaysFormat(e="long",{locale:t,locObj:r,numberingSystem:n}={}){return(r||Locale.create(t,n)).weekdays(e,!0)}}function dayDiff(e,t){var r=e=>e.toUTC(0,{keepLocalTime:!0}).startOf("days").valueOf(),t=r(t)-r(e);return Math.floor(Duration.fromMillis(t).as("days"))}function highOrderDiffs(e,t,r){var n,i,a={},s=e;let o,l;for([n,i]of[["years",(e,t)=>t.year-e.year],["quarters",(e,t)=>t.quarter-e.quarter+4*(t.year-e.year)],["months",(e,t)=>t.month-e.month+12*(t.year-e.year)],["weeks",(e,t)=>{e=dayDiff(e,t);return(e-e%7)/7}],["days",dayDiff]])0<=r.indexOf(n)&&(a[o=n]=i(e,t),(l=s.plus(a))>t?(a[n]--,t<(e=s.plus(a))&&(l=e,a[n]--,e=s.plus(a))):e=l);return[e,a,l,o]}const diff=(e,t,r,n)=>{let[i,a,s,o]=highOrderDiffs(e,t,r);e=+t-+i,r=r.filter(e=>0<=["hours","minutes","seconds","milliseconds"].indexOf(e)),0===r.length&&(s=s<t?i.plus({[o]:1}):s)!==i&&(a[o]=(a[o]||0)+e/(+s-+i)),t=Duration.fromObject(a,n);return 0<r.length?Duration.fromMillis(e,n).shiftTo(...r).plus(t):t},missingFtp="missing Intl.DateTimeFormat.formatToParts support";function intUnit(e,t=e=>e){return{regex:e,deser:([e])=>t(parseDigits(e))}}const spaceOrNBSPPattern=`[ ${String.fromCharCode(160)}]`,spaceOrNBSPRegExp=new RegExp(spaceOrNBSPPattern,"g");function fixListRegex(e){return e.replace(/\./g,"\\.?").replace(spaceOrNBSPRegExp,spaceOrNBSPPattern)}function stripInsensitivities(e){return e.replace(/\./g,"").replace(spaceOrNBSPRegExp," ").toLowerCase()}function oneOf(e,r){return{regex:RegExp(e.map(fixListRegex).join("|")),deser:([t])=>e.findIndex(e=>stripInsensitivities(t)===stripInsensitivities(e))+r}}function offset(e,t){return{regex:e,deser:([,e,t])=>signedOffset(e,t),groups:t}}function simple(e){return{regex:e,deser:([e])=>e}}function escapeToken(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function unitForToken(t,r){const n=digitRegex(r),i=digitRegex(r,"{2}"),a=digitRegex(r,"{3}"),s=digitRegex(r,"{4}"),o=digitRegex(r,"{6}"),l=digitRegex(r,"{1,2}"),u=digitRegex(r,"{1,3}"),c=digitRegex(r,"{1,6}"),d=digitRegex(r,"{1,9}"),m=digitRegex(r,"{2,4}"),h=digitRegex(r,"{4,6}"),f=e=>({regex:RegExp(escapeToken(e.val)),deser:([e])=>e,literal:!0});var e=(e=>{if(t.literal)return f(e);switch(e.val){case"G":return oneOf(r.eras("short"),0);case"GG":return oneOf(r.eras("long"),0);case"y":return intUnit(c);case"yy":return intUnit(m,untruncateYear);case"yyyy":return intUnit(s);case"yyyyy":return intUnit(h);case"yyyyyy":return intUnit(o);case"M":return intUnit(l);case"MM":return intUnit(i);case"MMM":return oneOf(r.months("short",!0),1);case"MMMM":return oneOf(r.months("long",!0),1);case"L":return intUnit(l);case"LL":return intUnit(i);case"LLL":return oneOf(r.months("short",!1),1);case"LLLL":return oneOf(r.months("long",!1),1);case"d":return intUnit(l);case"dd":return intUnit(i);case"o":return intUnit(u);case"ooo":return intUnit(a);case"HH":return intUnit(i);case"H":return intUnit(l);case"hh":return intUnit(i);case"h":return intUnit(l);case"mm":return intUnit(i);case"m":case"q":return intUnit(l);case"qq":return intUnit(i);case"s":return intUnit(l);case"ss":return intUnit(i);case"S":return intUnit(u);case"SSS":return intUnit(a);case"u":return simple(d);case"a":return oneOf(r.meridiems(),0);case"kkkk":return intUnit(s);case"kk":return intUnit(m,untruncateYear);case"W":return intUnit(l);case"WW":return intUnit(i);case"E":case"c":return intUnit(n);case"EEE":return oneOf(r.weekdays("short",!1),1);case"EEEE":return oneOf(r.weekdays("long",!1),1);case"ccc":return oneOf(r.weekdays("short",!0),1);case"cccc":return oneOf(r.weekdays("long",!0),1);case"Z":case"ZZ":return offset(new RegExp(`([+-]${l.source})(?::(${i.source}))?`),2);case"ZZZ":return offset(new RegExp(`([+-]${l.source})(${i.source})?`),2);case"z":return simple(/[a-z_+-/]{1,256}?/i);default:return f(e)}})(t)||{invalidReason:missingFtp};return Object.assign(Object.assign({},e),{token:t})}const partTypeStyleToTokenVal={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayPeriod:"a",hour12:{numeric:"h","2-digit":"hh"},hour24:{numeric:"H","2-digit":"HH"},hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};function tokenForPart(e,t,r){var{type:e,value:n}=e;if("literal"===e)return{literal:!(i=/^\s+$/.test(n)),val:i?" ":n};var i=t[e];let a=e,s=("hour"===e&&(a=null!=t.hour12?t.hour12?"hour12":"hour24":null!=t.hourCycle?"h11"===t.hourCycle||"h12"===t.hourCycle?"hour12":"hour24":r.hour12?"hour12":"hour24"),partTypeStyleToTokenVal[a]);return(s="object"==typeof s?s[i]:s)?{literal:!1,val:s}:void 0}function buildRegex(e){return[`^${e.map(e=>e.regex).reduce((e,t)=>`${e}(${t.source})`,"")}$`,e]}function match(e,t,n){const i=t.exec(e),a={};if(null!==i){let r=1;n.forEach(e=>{var t=e.groups?e.groups+1:1;e.literal||(a[e.token.val[0]]=e.deser(i.slice(r,r+t))),r+=t})}return[i,a]}function dateTimeFromMatches(n){let e=null,t;return isDefined(n.z)&&(e=IANAZone.create(n.z)),isDefined(n.Z)&&(e=e||new FixedOffsetZone(+n.Z),t=+n.Z),isDefined(n.q)&&(n.M=3*(n.q-1)+1),isDefined(n.h)&&(+n.h<12&&1===n.a?n.h=n.h+12:12===n.h&&0===n.a&&(n.h=0)),0===n.G&&n.y&&(n.y=-n.y),isDefined(n.u)&&(n.S=parseMillis(n.u)||0),[Object.keys(n).reduce((e,t)=>{var r=(e=>{switch(e){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}})(t);return r&&(e[r]=n[t]),e},{}),e,t]}let dummyDateTimeCache;function getDummyDateTime(e){return dummyDateTimeCache=void 0===dummyDateTimeCache?DateTime.fromMillis(1555555555555,{locale:e.locale}):dummyDateTimeCache}function maybeExpandMacroToken(e,t){return e.literal||null==(t=formatOptsToTokens(Formatter.macroTokenToFormatOpts(e.val),t))||t.includes(void 0)?e:t}function expandMacroTokens(e,t){return Array.prototype.concat(...e.map(e=>maybeExpandMacroToken(e,t)))}class TokenParser{get invalidReason(){return this.disqualifyingUnit?this.disqualifyingUnit.invalidReason:null}get isValid(){return!this.disqualifyingUnit}constructor(e,t){this.locale=e,this.format=t,this._mapTokens()}explainFromTokens(e){if(this.isValid){var[t,r]=match(e,this.regex,this.handlers),[n,i,a]=r?dateTimeFromMatches(r):[null,null,void 0];if(r.hasOwnProperty("a")&&r.hasOwnProperty("H"))throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");return{input:e,tokens:this.tokens,regex:this.regex,rawMatches:t,matches:r,result:n,zone:i,specificOffset:a}}return{input:e,tokens:this.tokens,invalidReason:this.invalidReason}}_mapTokens(){this.tokens=expandMacroTokens(Formatter.parseFormat(this.format),this.locale);var e,t=this.tokens.map(e=>unitForToken(e,this.locale));this.disqualifyingUnit=t.find(e=>e.invalidReason),this.units=t.filter(e=>!e.invalidReason),this.disqualifyingUnit||([t,e]=buildRegex(this.units),this.regex=RegExp(t,"i"),this.handlers=e)}}function explainFromTokens(e,t,r){return new TokenParser(e,r).explainFromTokens(t)}function sanitizeSpaces(e){return e.replace(/\u202F/g," ")}function parseFromTokens(e,t,r){var{result:e,zone:t,specificOffset:r,invalidReason:n}=explainFromTokens(e,sanitizeSpaces(t),sanitizeSpaces(r));return[e,t,r,n]}function formatOptsToTokens(t,e){if(!t)return null;var e=Formatter.create(e,t).dtFormatter(getDummyDateTime(e)),r=e.formatToParts();const n=e.resolvedOptions();return r.map(e=>tokenForPart(e,t,n))}const INVALID="Invalid DateTime",MAX_DATE=864e13;function fixOffset(e,t,r){var n=e-60*t*1e3,i=r.offset(n);return t===i?[n,t]:i===(r=r.offset(n-=60*(i-t)*1e3))?[n,i]:[e-60*Math.min(i,r)*1e3,Math.max(i,r)]}function tsToObj(e,t){e+=60*t*1e3;t=new Date(e);return{year:t.getUTCFullYear(),month:t.getUTCMonth()+1,day:t.getUTCDate(),hour:t.getUTCHours(),minute:t.getUTCMinutes(),second:t.getUTCSeconds(),millisecond:t.getUTCMilliseconds()}}function objToTS(e,t,r){return fixOffset(objToLocalTS(e),t,r)}function parseDataToDateTime(e,t,r,n,i,a){var{setZone:s,zone:o}=r;return e&&0!==Object.keys(e).length||t?(t=t||o,e=DateTime.fromObject(e||void 0,Object.assign(Object.assign({},r),{zone:t,specificOffset:a})),s?e:e.setZone(o)):DateTime.invalid(new Invalid("unparsable",`the input "${i}" can't be parsed as `+n))}function toTechFormat(e,t,r=!0){return e.isValid?Formatter.create(Locale.create("en-US"),{allowZ:r,forceSimple:!0}).formatDateTimeFromString(e,t):null}const defaultUnitValues={year:0,month:1,day:1,hour:0,minute:0,second:0,millisecond:0},defaultWeekUnitValues={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},defaultOrdinalUnitValues={ordinal:1,hour:0,minute:0,second:0,millisecond:0},orderedUnits=["year","month","day","hour","minute","second","millisecond"],orderedWeekUnits=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],orderedOrdinalUnits=["year","ordinal","hour","minute","second","millisecond"];function normalizeUnit(e){var t=PLURAL_MAPPING[e.toLowerCase()];if(t)return t;throw new InvalidUnitError(e)}class DateTime{get day(){return this.isValid?this._c.day:NaN}get daysInMonth(){return daysInMonth(this.year,this.month)}get daysInYear(){return this.isValid?daysInYear(this.year):NaN}get hour(){return this.isValid?this._c.hour:NaN}get invalidExplanation(){return this._invalid?this._invalid.explanation:void 0}get invalidReason(){return this._invalid?this._invalid.reason:void 0}get isInDST(){return!this.isOffsetFixed&&(this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset)}get isInLeapYear(){return isLeapYear(this.year)}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isValid(){return null===this._invalid}get isWeekend(){return this.isValid&&this.loc.getWeekendDays().includes(this.weekday)}get loc(){return this.isValid?this._loc.clone():void 0}get localWeekNumber(){return this.isValid?this._possiblyCachedLocalWeekData(this).weekNumber:NaN}get localWeekYear(){return this.isValid?this._possiblyCachedLocalWeekData(this).weekYear:NaN}get localWeekday(){return this.isValid?this._possiblyCachedLocalWeekData(this).weekday:NaN}get locale(){return this.isValid?this._loc.locale:void 0}get millisecond(){return this.isValid?this._c.millisecond:NaN}get minute(){return this.isValid?this._c.minute:NaN}get month(){return this.isValid?this._c.month:NaN}get monthLong(){return this.isValid?Info.months("long",{locObj:this._loc})[this.month-1]:null}get monthShort(){return this.isValid?Info.months("short",{locObj:this._loc})[this.month-1]:null}get numberingSystem(){return this.isValid?this._loc.numberingSystem:void 0}get offset(){return this.isValid?+this._o:NaN}get offsetNameLong(){return this.isValid?this.zone.offsetName(this._ts,{format:"long",locale:this.locale}):null}get offsetNameShort(){return this.isValid?this.zone.offsetName(this._ts,{format:"short",locale:this.locale}):null}get ordinal(){return this.isValid?gregorianToOrdinal(this._c).ordinal:NaN}get outputCalendar(){return this.isValid?this._loc.outputCalendar:void 0}get quarter(){return this.isValid?Math.ceil(this._c.month/3):NaN}get second(){return this.isValid?this._c.second:NaN}get ts(){return this._ts}get weekNumber(){return this.isValid?this._possiblyCachedWeekData(this).weekNumber:NaN}get weekYear(){return this.isValid?this._possiblyCachedWeekData(this).weekYear:NaN}get weekday(){return this.isValid?this._possiblyCachedWeekData(this).weekday:NaN}get weekdayLong(){return this.isValid?Info.weekdays("long",{locObj:this._loc})[this.weekday-1]:null}get weekdayShort(){return this.isValid?Info.weekdays("short",{locObj:this._loc})[this.weekday-1]:null}get weeksInLocalWeekYear(){return this.isValid?weeksInWeekYear(this.localWeekYear,this.loc.getMinDaysInFirstWeek(),this.loc.getStartOfWeek()):NaN}get weeksInWeekYear(){return this.isValid?weeksInWeekYear(this.weekYear):NaN}get year(){return this.isValid?this._c.year:NaN}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}constructor(e){var t,r=e.zone||Settings.defaultZone;let n=e.invalid||(Number.isNaN(e.ts)?new Invalid("invalid timestamp"):null)||(r.isValid?null:DateTime._unsupportedZone(r));this._ts=isUndefined(e.ts)?Settings.now():e.ts;let i,a;n||(!!e.old&&e.old.ts===this._ts&&e.old.zone.equals(r)?[a,i]=[e.old.c,e.old.o]:(t=isNumber(e.o)&&!e.old?e.o:r.offset(this.ts),a=tsToObj(this._ts,t),n=Number.isNaN(a.year)?new Invalid("invalid input"):null,a=n?void 0:a,i=n?void 0:t)),this._zone=r,this._loc=e.loc||Locale.create(),this._invalid=n,this._weekData=null,this._c=a,this._o=i,this._isLuxonDateTime=!0}static buildFormatParser(e,t={}){var{locale:t=null,numberingSystem:r=null}=t,t=Locale.fromOpts({locale:t,numberingSystem:r,defaultToEN:!0});return new TokenParser(t,e)}static expandFormat(e,t={}){return expandMacroTokens(Formatter.parseFormat(e),Locale.fromObject(t)).map(e=>e.val).join("")}static fromFormat(e,t,r={}){if(isUndefined(e)||isUndefined(t))throw new InvalidArgumentError("fromFormat requires an input string and a format");var{locale:n,numberingSystem:i}=r,[n,i,a,s]=parseFromTokens(Locale.fromOpts({locale:n,numberingSystem:i,defaultToEN:!0}),e,t);return s?DateTime.invalid(s):parseDataToDateTime(n,i||null,r,"format "+t,e,a)}static fromFormatExplain(e,t,r={}){var{locale:r,numberingSystem:n}=r;return explainFromTokens(Locale.fromOpts({locale:r,numberingSystem:n,defaultToEN:!0}),e,t)}static fromFormatParser(e,t,r={}){if(isUndefined(e)||isUndefined(t))throw new InvalidArgumentError("fromFormatParser requires an input string and a format parser");var n,i,a,{locale:s=null,numberingSystem:o=null}=r,s=Locale.fromOpts({locale:s,numberingSystem:o,defaultToEN:!0});if(s.equals(t.locale))return{result:o,zone:n,specificOffset:i,invalidReason:a}=t.explainFromTokens(e),a?DateTime.invalid(a):parseDataToDateTime(o,n,r,"format "+t.format,e,i);throw new InvalidArgumentError(`fromFormatParser called with a locale of ${s}, `+"but the format parser was created for "+t.locale)}static fromHTTP(e,t={}){var[r,n]=parseHTTPDate(e);return parseDataToDateTime(r,n,t,"HTTP",e)}static fromISO(e,t={}){var[r,n]=parseISODate(e);return parseDataToDateTime(r,n,t,"ISO 8601",e)}static fromJSDate(e,t={}){var r,e=isDate(e)?e.valueOf():NaN;return Number.isNaN(e)?DateTime.invalid("invalid input"):(r=normalizeZone(t.zone,Settings.defaultZone)).isValid?new DateTime({ts:e,zone:r,loc:Locale.fromObject(t)}):DateTime.invalid(DateTime._unsupportedZone(r))}static fromMillis(e,t={}){if(isNumber(e))return e<-MAX_DATE||e>MAX_DATE?DateTime.invalid("Timestamp out of range"):new DateTime({ts:e,zone:normalizeZone(t.zone,Settings.defaultZone),loc:Locale.fromObject(t)});throw new InvalidArgumentError(`fromMillis requires a numerical input, but received a ${typeof e} with value `+e)}static fromObject(e={},t={}){var r=normalizeZone(t.zone,Settings.defaultZone);if(!r.isValid)return DateTime.invalid(DateTime._unsupportedZone(r));var n=Locale.fromObject(t),i=normalizeObject(e,normalizeUnit),a=Settings.now(),t=isNumber(t.specificOffset)?t.specificOffset:r.offset(a),s=isDefined(i.ordinal),o=isDefined(i.year),l=isDefined(i.month)||isDefined(i.day),o=o||l,u=i.weekYear||i.weekNumber;if((o||s)&&u)throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(l&&s)throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");var l=u||i.weekday&&!o,{minDaysInFirstWeek:u,startOfWeek:c}=usesLocalWeekValues(i,n),a=tsToObj(a,t),o={containsGregor:o,containsOrdinal:s,loc:n,normalized:i,obj:e,offsetProvis:t,useWeekData:l,zoneToUse:r};return l?DateTime._buildObject(o,orderedWeekUnits,defaultWeekUnitValues,gregorianToWeek(a,u,c)):s?DateTime._buildObject(o,orderedOrdinalUnits,defaultOrdinalUnitValues,gregorianToOrdinal(a)):DateTime._buildObject(o,orderedUnits,defaultUnitValues,a)}static fromRFC2822(e,t={}){var[r,n]=parseRFC2822Date(e);return parseDataToDateTime(r,n,t,"RFC 2822",e)}static fromSQL(e,t={}){var[r,n]=parseSQL(e);return parseDataToDateTime(r,n,t,"SQL",e)}static fromSeconds(e,t={}){if(isNumber(e))return new DateTime({ts:1e3*e,zone:normalizeZone(t.zone,Settings.defaultZone),loc:Locale.fromObject(t)});throw new InvalidArgumentError("fromSeconds requires a numerical input")}static fromString(e,t,r={}){return DateTime.fromFormat(e,t,r)}static fromStringExplain(e,t,r={}){return DateTime.fromFormatExplain(e,t,r)}static invalid(e,t){if(!e)throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");e=e instanceof Invalid?e:new Invalid(e,t);if(Settings.throwOnInvalid)throw new InvalidDateTimeError(e);return new DateTime({invalid:e})}static isDateTime(e){return!(!e||!e._isLuxonDateTime)}static local(...e){var[e,t]=this._lastOpts(e),[t,r,n,i,a,s,o]=t;return DateTime._quickDT({year:t,month:r,day:n,hour:i,minute:a,second:s,millisecond:o},e)}static max(...e){if(e.every(DateTime.isDateTime))return bestBy(e,e=>e.valueOf(),Math.max);throw new InvalidArgumentError("max requires all arguments be DateTimes")}static min(...e){if(e.every(DateTime.isDateTime))return bestBy(e,e=>e.valueOf(),Math.min);throw new InvalidArgumentError("min requires all arguments be DateTimes")}static now(){return new DateTime({})}static parseFormatForOpts(e,t={}){e=formatOptsToTokens(e,Locale.fromObject(t));return e?e.map(e=>e?e.val:null).join(""):null}static resetCache(){this._zoneOffsetTs=void 0,this._zoneOffsetGuessCache=new Map}static utc(...e){var[e,t]=this._lastOpts(e),[t,r,n,i,a,s,o]=t;return e.zone=FixedOffsetZone.utcInstance,this._quickDT({year:t,month:r,day:n,hour:i,minute:a,second:s,millisecond:o},e)}static _buildObject(t,e,r,n){let i=!1;e.forEach(e=>{isDefined(t.normalized[e])?i=!0:i?t.normalized[e]=r[e]:t.normalized[e]=n[e]});var a,e=(t.useWeekData?hasInvalidWeekData:t.containsOrdinal?hasInvalidOrdinalData:hasInvalidGregorianData)(t.normalized)||hasInvalidTimeData(t.normalized);return e?DateTime.invalid(e):([e,a]=objToTS(t.useWeekData?weekToGregorian(t.normalized):t.containsOrdinal?ordinalToGregorian(t.normalized):t.normalized,t.offsetProvis,t.zoneToUse),e=new DateTime({ts:e,zone:t.zoneToUse,o:a,loc:t.loc}),t.normalized.weekday&&t.containsGregor&&t.obj.weekday!==e.weekday?DateTime.invalid("mismatched weekday",`you can't specify both a weekday of ${t.normalized.weekday} and a date of `+e.toISO()):e.isValid?e:DateTime.invalid(e._invalid))}static _diffRelative(t,r,n){const i=!!isUndefined(n.round)||n.round,e=(e,t)=>{return e=roundTo(e,i||n.calendary?0:2,!0),r._loc.clone(n).relFormatter(n).format(e,t)},a=e=>n.calendary?r.hasSame(t,e)?0:r.startOf(e).diff(t.startOf(e),e).get(e):r.diff(t,e).get(e);if(n.unit)return e(a(n.unit),n.unit);for(const o of n.units){var s=a(o);if(1<=Math.abs(s))return e(s,o)}return e(r<t?-0:0,n.units[n.units.length-1])}static _guessOffsetForZone(e){return this._zoneOffsetGuessCache.has(e)||(void 0===this._zoneOffsetTs&&(this._zoneOffsetTs=Settings.now()),this._zoneOffsetGuessCache.set(e,e.offset(this._zoneOffsetTs))),this._zoneOffsetGuessCache.get(e)}static _lastOpts(e){let t={},r;return r=0<e.length&&"object"==typeof e[e.length-1]?(t=e.pop(),e):Array.from(e),[t,r]}static _quickDT(e,t){var r=normalizeZone(t.zone,Settings.defaultZone);if(!r.isValid)return DateTime.invalid(this._unsupportedZone(r));var t=Locale.fromObject(t),n=Settings.now();let i,a;if(isDefined(e.year)){for(const o of orderedUnits)isUndefined(e[o])&&(e[o]=defaultUnitValues[o]);var s=hasInvalidGregorianData(e)||hasInvalidTimeData(e);if(s)return DateTime.invalid(s);s=this._guessOffsetForZone(r);[i,a]=objToTS(e,s,r)}else i=n;return new DateTime({ts:i,zone:r,loc:t,o:a})}static _unsupportedZone(e){return new Invalid("unsupported zone",`the zone "${e.name}" is not supported`)}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`:`DateTime { Invalid, reason: ${this.invalidReason} }`}diff(e,t="milliseconds",r={}){var n,i,a;return this.isValid&&e.isValid?(t=maybeArray(t).map(Duration.normalizeUnit),a=(n=e.valueOf()>this.valueOf())?this:e,i=n?e:this,a=diff(a,i,t,Object.assign({locale:this.locale,numberingSystem:this.numberingSystem},r)),n?a.negate():a):(i=this.invalidReason||e.invalidReason,Duration.invalid(i,"created by diffing an invalid DateTime"))}diffNow(e="milliseconds",t={}){return this.diff(DateTime.now(),e,t)}endOf(e,{useLocaleWeeks:t=!1}={}){return this.plus({[e]:1}).startOf(e,{useLocaleWeeks:t}).minus({milliseconds:1})}equals(e){return this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this._loc.equals(e._loc)}get(e){return this[e]}getPossibleOffsets(){var e,t,r,n;return this.isValid&&!this.isOffsetFixed&&(e=objToLocalTS(this._c),r=this.zone.offset(e-864e5),n=this.zone.offset(e+864e5),(r=this.zone.offset(e-6e4*r))!==(n=this.zone.offset(e-6e4*n)))&&(t=e-6e4*n,r=tsToObj(e=e-6e4*r,r),n=tsToObj(t,n),r.hour===n.hour)&&r.minute===n.minute&&r.second===n.second&&r.millisecond===n.millisecond?[this._clone({ts:e}),this._clone({ts:t})]:[this]}hasSame(e,t,r){var n;return!!this.isValid&&(n=e.valueOf(),+(e=this.setZone(e.zone,{keepLocalTime:!0})).startOf(t)<=n)&&n<=+e.endOf(t,r)}minus(e){return this.isValid?(e=Duration.fromDurationLike(e).negate(),this._clone(this._adjustTime(e))):this}plus(e){return this.isValid?(e=Duration.fromDurationLike(e),this._clone(this._adjustTime(e))):this}reconfigure(e){e=this._loc.clone(e);return this._clone({loc:e})}resolvedLocaleOptions(e={}){var{locale:e,numberingSystem:t,calendar:r}=Formatter.create(this._loc.clone(e),e).resolvedOptions(this);return{locale:e,numberingSystem:t,outputCalendar:r}}set(e){if(!this.isValid)return this;var e=normalizeObject(e,normalizeUnit),{minDaysInFirstWeek:t,startOfWeek:r}=usesLocalWeekValues(e,this.loc),n=isDefined(e.weekYear)||isDefined(e.weekNumber)||isDefined(e.weekday),i=isDefined(e.ordinal),a=isDefined(e.year),s=isDefined(e.month)||isDefined(e.day),o=e.weekYear||e.weekNumber;if((a||s||i)&&o)throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(s&&i)throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");let l;n?l=weekToGregorian(Object.assign(Object.assign({},gregorianToWeek(this._c,t,r)),e),t,r):isUndefined(e.ordinal)?(l=Object.assign(Object.assign({},this.toObject()),e),isUndefined(e.day)&&(l.day=Math.min(daysInMonth(l.year,l.month),l.day))):l=ordinalToGregorian(Object.assign(Object.assign({},gregorianToOrdinal(this._c)),e));var[a,o]=objToTS(l,this._o,this.zone);return this._clone({ts:a,o:o})}setLocale(e){return this.reconfigure({locale:e})}setZone(t,{keepLocalTime:r=!1,keepCalendarTime:n=!1}={}){if((t=normalizeZone(t,Settings.defaultZone)).equals(this.zone))return this;if(t.isValid){let e=this._ts;return(r||n)&&(r=t.offset(this._ts),n=this.toObject(),e=objToTS(n,r,t)[0]),this._clone({ts:e,zone:t})}return DateTime.invalid(DateTime._unsupportedZone(t))}startOf(e,{useLocaleWeeks:t=!1}={}){if(!this.isValid)return this;var r,n={},e=Duration.normalizeUnit(e);switch(e){case"years":n.month=1;case"quarters":case"months":n.day=1;case"weeks":case"days":n.hour=0;case"hours":n.minute=0;case"minutes":n.second=0;case"seconds":n.millisecond=0}return"weeks"===e&&(t?(t=this.loc.getStartOfWeek(),r=this["weekday"],r<t&&(n.weekNumber=this.weekNumber-1),n.weekday=t):n.weekday=1),"quarters"===e&&(r=Math.ceil(this.month/3),n.month=3*(r-1)+1),this.set(n)}toBSON(){return this.toJSDate()}toFormat(e,t={}){return this.isValid?Formatter.create(this._loc.redefaultToEN(t)).formatDateTimeFromString(this,e):INVALID}toHTTP(){return toTechFormat(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toISO({format:e="extended",suppressSeconds:t=!1,suppressMilliseconds:r=!1,includeOffset:n=!0,extendedZone:i=!1}={}){return this.isValid?[this._toISODate(e="extended"===e),"T",this._toISOTime(e,t,r,n,i)].join(""):null}toISODate({format:e="extended"}={format:"extended"}){return this.isValid?this._toISODate("extended"===e):null}toISOTime({suppressMilliseconds:e=!1,suppressSeconds:t=!1,includeOffset:r=!0,includePrefix:n=!1,extendedZone:i=!1,format:a="extended"}={}){return this.isValid?[n?"T":"",this._toISOTime("extended"===a,t,e,r,i)].join(""):null}toISOWeekDate(){return toTechFormat(this,"kkkk-'W'WW-c")}toJSDate(){return new Date(this.isValid?this._ts:NaN)}toJSON(){return this.toISO()}toLocal(){return this.setZone(Settings.defaultZone)}toLocaleParts(e={}){return this.isValid?Formatter.create(this._loc.clone(e),e).formatDateTimeParts(this):[]}toLocaleString(e=DATE_SHORT,t={}){return this.isValid?Formatter.create(this._loc.clone(t),e).formatDateTime(this):INVALID}toMillis(){return this.isValid?this.ts:NaN}toObject(e={includeConfig:!1}){var t;return this.isValid?(t=Object.assign({},this._c),e.includeConfig&&(t.outputCalendar=this.outputCalendar,t.numberingSystem=this._loc.numberingSystem,t.locale=this._loc.locale),t):{}}toRFC2822(){return toTechFormat(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toRelative(e={}){if(!this.isValid)return null;var t=e.base||DateTime.fromObject({},{zone:this.zone}),r=e.padding?this<t?-e.padding:e.padding:0;let n=["years","months","days","hours","minutes","seconds"],i=e.unit;return Array.isArray(e.unit)&&(n=e.unit,i=void 0),DateTime._diffRelative(t,this.plus(r),Object.assign(Object.assign({},e),{numeric:"always",units:n,unit:i}))}toRelativeCalendar(e={}){return this.isValid?DateTime._diffRelative(e.base||DateTime.fromObject({},{zone:this.zone}),this,Object.assign(Object.assign({},e),{numeric:"auto",units:["years","months","days"],calendary:!0})):null}toSQL(e={}){return this.isValid?this.toSQLDate()+" "+this.toSQLTime(e):null}toSQLDate(){return this.isValid?this._toISODate(!0):null}toSQLTime({includeOffset:e=!0,includeZone:t=!1,includeOffsetSpace:r=!0}={}){let n="HH:mm:ss.SSS";return(t||e)&&(r&&(n+=" "),t?n+="z":e&&(n+="ZZ")),toTechFormat(this,n,!0)}toSeconds(){return this.isValid?this._ts/1e3:NaN}toString(){return this.isValid?this.toISO():INVALID}toUTC(e=0,t={}){return this.setZone(FixedOffsetZone.instance(e),t)}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}until(e){return Interval.fromDateTimes(this,e)}valueOf(){return this.toMillis()}_adjustTime(e){var t=this._o,r=this._c.year+Math.trunc(e.years),n=this._c.month+Math.trunc(e.months)+3*Math.trunc(e.quarters),r=Object.assign(Object.assign({},this._c),{year:r,month:n,day:Math.min(this._c.day,daysInMonth(r,n))+Math.trunc(e.days)+7*Math.trunc(e.weeks)}),n=Duration.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds");let[i,a]=fixOffset(objToLocalTS(r),t,this.zone);return 0!==n&&(i+=n,a=this.zone.offset(i)),{ts:i,o:a}}_clone(e){var t={ts:this._ts,zone:this.zone,c:this._c,o:this._o,loc:this._loc,invalid:this._invalid||void 0};return new DateTime(Object.assign(Object.assign(Object.assign({},t),e),{old:t}))}_possiblyCachedLocalWeekData(e){return e._localWeekData||(e._localWeekData=gregorianToWeek(e._c,e.loc.getMinDaysInFirstWeek(),e.loc.getStartOfWeek())),e._localWeekData}_possiblyCachedWeekData(e){return null===e._weekData&&(e._weekData=gregorianToWeek(e._c)),e._weekData}_toISODate(e){var t=9999<this._c.year||this._c.year<0;let r="";return t&&0<=this._c.year&&(r+="+"),r+=padStart(this._c.year,t?6:4),r=e?(r=(r+="-")+padStart(this._c.month)+"-")+padStart(this._c.day):(r+=padStart(this._c.month))+padStart(this._c.day)}_toISOTime(e,t,r,n,i){let a=padStart(this._c.hour);return e?(a=(a+=":")+padStart(this._c.minute),0===this._c.millisecond&&0===this._c.second&&t||(a+=":")):a+=padStart(this._c.minute),0===this._c.millisecond&&0===this._c.second&&t||(a+=padStart(this._c.second),0===this._c.millisecond&&r)||(a=(a+=".")+padStart(this._c.millisecond,3)),n&&(this.isOffsetFixed&&0===this.offset&&!i?a+="Z":a=this._o<0?(a=(a+="-")+padStart(Math.trunc(-this._o/60))+":")+padStart(Math.trunc(-this._o%60)):(a=(a+="+")+padStart(Math.trunc(this._o/60))+":")+padStart(Math.trunc(this._o%60))),i&&(a+="["+this.zone.ianaName+"]"),a}}DateTime.DATETIME_FULL=DATETIME_FULL,DateTime.DATETIME_FULL_WITH_SECONDS=DATETIME_FULL_WITH_SECONDS,DateTime.DATETIME_HUGE=DATETIME_HUGE,DateTime.DATETIME_HUGE_WITH_SECONDS=DATETIME_HUGE_WITH_SECONDS,DateTime.DATETIME_MED=DATETIME_MED,DateTime.DATETIME_MED_WITH_SECONDS=DATETIME_MED_WITH_SECONDS,DateTime.DATETIME_MED_WITH_WEEKDAY=DATETIME_MED_WITH_WEEKDAY,DateTime.DATETIME_SHORT=DATETIME_SHORT,DateTime.DATETIME_SHORT_WITH_SECONDS=DATETIME_SHORT_WITH_SECONDS,DateTime.DATE_FULL=DATE_FULL,DateTime.DATE_HUGE=DATE_HUGE,DateTime.DATE_MED=DATE_MED,DateTime.DATE_MED_WITH_WEEKDAY=DATE_MED_WITH_WEEKDAY,DateTime.DATE_SHORT=DATE_SHORT,DateTime.TIME_24_SIMPLE=TIME_24_SIMPLE,DateTime.TIME_24_WITH_LONG_OFFSET=TIME_24_WITH_LONG_OFFSET,DateTime.TIME_24_WITH_SECONDS=TIME_24_WITH_SECONDS,DateTime.TIME_24_WITH_SHORT_OFFSET=TIME_24_WITH_SHORT_OFFSET,DateTime.TIME_SIMPLE=TIME_SIMPLE,DateTime.TIME_WITH_LONG_OFFSET=TIME_WITH_LONG_OFFSET,DateTime.TIME_WITH_SECONDS=TIME_WITH_SECONDS,DateTime.TIME_WITH_SHORT_OFFSET=TIME_WITH_SHORT_OFFSET,DateTime._zoneOffsetGuessCache=new Map;const VERSION="4.6.2";export{DateTime,Duration,FixedOffsetZone,IANAZone,Info,Interval,Intl$1 as Intl,InvalidZone,ORDERED_UNITS,REVERSE_ORDERED_UNITS,Settings,SystemZone,VERSION,Zone};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
