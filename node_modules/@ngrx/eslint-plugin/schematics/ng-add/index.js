"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var strip_json_comments_1 = __importDefault(require("strip-json-comments"));
function addNgRxESLintPlugin(schema) {
    return function (host, context) {
        var _a, _b;
        var eslintConfigPath = '.eslintrc.json';
        var docs = 'https://ngrx.io/guide/eslint-plugin';
        var eslint = (_a = host.read(eslintConfigPath)) === null || _a === void 0 ? void 0 : _a.toString('utf-8');
        if (!eslint) {
            context.logger.warn("\nCould not find the ESLint config at `".concat(eslintConfigPath, "`.\nThe NgRx ESLint Plugin is installed but not configured.\n\nPlease see ").concat(docs, " to configure the NgRx ESLint Plugin.\n"));
            return host;
        }
        try {
            var json = JSON.parse((0, strip_json_comments_1.default)(eslint));
            if (json.overrides) {
                if (!json.overrides.some(function (override) {
                    var _a;
                    return (_a = override.extends) === null || _a === void 0 ? void 0 : _a.some(function (extend) {
                        return extend.startsWith('plugin:@ngrx');
                    });
                })) {
                    json.overrides.push(configurePlugin(schema.config));
                }
            }
            else if (!((_b = json.extends) === null || _b === void 0 ? void 0 : _b.some(function (extend) { return extend.startsWith('plugin:@ngrx'); }))) {
                json.overrides = [configurePlugin(schema.config)];
            }
            host.overwrite(eslintConfigPath, JSON.stringify(json, null, 2));
            context.logger.info("\n  The NgRx ESLint Plugin is installed and configured with the '".concat(schema.config, "' config.\n\n  Take a look at the docs at ").concat(docs, " if you want to change the default configuration.\n  "));
            return host;
        }
        catch (err) {
            var detailsContent = err instanceof Error
                ? "\nDetails:\n".concat(err.message, "\n")
                : '';
            context.logger.warn("\nSomething went wrong while adding the NgRx ESLint Plugin.\nThe NgRx ESLint Plugin is installed but not configured.\n\nPlease see ".concat(docs, " to configure the NgRx ESLint Plugin.\n").concat(detailsContent, "\n"));
        }
    };
    function configurePlugin(config) {
        return {
            files: ['*.ts'],
            extends: ["plugin:@ngrx/".concat(config)],
        };
    }
}
exports.default = addNgRxESLintPlugin;
//# sourceMappingURL=index.js.map