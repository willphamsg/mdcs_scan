"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path_1 = require("path");
var prettier_1 = require("prettier");
var rules_1 = require("../src/rules");
var prettierConfig = prettier_1.resolveConfig.sync(__dirname);
var RULE_MODULE = '@ngrx';
var CONFIG_DIRECTORY = './modules/eslint-plugin/src/configs/';
writeConfig('recommended', function (rule) { var _a, _b; return !!((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.recommended) && !((_b = rule.meta.docs) === null || _b === void 0 ? void 0 : _b.requiresTypeChecking); });
writeConfig('all', function (rule) { var _a; return !((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.requiresTypeChecking); });
writeConfig('strict', function (rule) { var _a; return !((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.requiresTypeChecking); }, function () { return 'error'; });
writeConfig('recommended-requiring-type-checking', function (rule) { var _a; return !!((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.recommended); });
writeConfig('all-requiring-type-checking', function () { return true; });
writeConfig('strict-requiring-type-checking', function () { return true; }, function () { return 'error'; });
writeConfig('store', function (rule) { var _a; return rule.meta.ngrxModule === 'store' && !((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.requiresTypeChecking); });
writeConfig('store-strict', function (rule) { var _a; return rule.meta.ngrxModule === 'store' && !((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.requiresTypeChecking); }, function () { return 'error'; });
writeConfig('effects', function (rule) { var _a; return rule.meta.ngrxModule === 'effects' && !((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.requiresTypeChecking); });
writeConfig('effects-strict', function (rule) { var _a; return rule.meta.ngrxModule === 'effects' && !((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.requiresTypeChecking); }, function () { return 'error'; });
writeConfig('effects-requiring-type-checking', function (rule) { return rule.meta.ngrxModule === 'effects'; });
writeConfig('effects-strict-requiring-type-checking', function (rule) { return rule.meta.ngrxModule === 'effects'; }, function () { return 'error'; });
writeConfig('component-store', function (rule) {
    var _a;
    return rule.meta.ngrxModule === 'component-store' &&
        !((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.requiresTypeChecking);
});
writeConfig('component-store-strict', function (rule) {
    var _a;
    return rule.meta.ngrxModule === 'component-store' &&
        !((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.requiresTypeChecking);
}, function () { return 'error'; });
function writeConfig(configName, predicate, setting) {
    if (setting === void 0) { setting = function (rule) { var _a; return ((_a = rule.meta.docs) === null || _a === void 0 ? void 0 : _a.recommended) || 'warn'; }; }
    var rulesForConfig = Object.entries(rules_1.rules).filter(function (_a) {
        var _b = __read(_a, 2), _ = _b[0], rule = _b[1];
        return predicate(rule);
    });
    var configRules = rulesForConfig.reduce(function (rules, _a) {
        var _b = __read(_a, 2), ruleName = _b[0], rule = _b[1];
        rules["".concat(RULE_MODULE, "/").concat(ruleName)] = setting(rule);
        return rules;
    }, {});
    var parserOptions = rulesForConfig.some(function (_a) {
        var _b;
        var _c = __read(_a, 2), _ = _c[0], rule = _c[1];
        return (_b = rule.meta.docs) === null || _b === void 0 ? void 0 : _b.requiresTypeChecking;
    })
        ? {
            ecmaVersion: 2020,
            sourceType: 'module',
            project: './tsconfig.json',
        }
        : null;
    var code = "\n/**\n * DO NOT EDIT\n * This file is generated\n */\n\nexport = {\n  parser: \"@typescript-eslint/parser\",\n  ".concat(parserOptions ? "parserOptions: ".concat(JSON.stringify(parserOptions), ",") : '', "\n  plugins: [\"").concat(RULE_MODULE, "\"],\n  rules: ").concat(JSON.stringify(configRules), ",\n}\n");
    var config = (0, prettier_1.format)(code, __assign({ parser: 'typescript' }, prettierConfig));
    (0, fs_1.writeFileSync)((0, path_1.join)(CONFIG_DIRECTORY, "".concat(configName, ".ts")), config);
}
//# sourceMappingURL=generate-config.js.map