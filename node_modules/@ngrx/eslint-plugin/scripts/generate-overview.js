"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var os_1 = require("os");
var prettier_1 = require("prettier");
var rules_1 = require("../src/rules");
var configs_1 = require("../src/configs");
var prettierConfig = prettier_1.resolveConfig.sync(__dirname);
var OVERVIEW = './projects/ngrx.io/content/guide/eslint-plugin/index.md';
var GH_CONFIGS = 'https://github.com/ngrx/platform/blob/main/modules/eslint-plugin/src/configs';
generateRules();
generateConfigurations();
function generateRules() {
    var moduleRules = Object.entries(rules_1.rules).reduce(function (all, _a) {
        var _b, _c, _d, _e, _f, _g;
        var _h = __read(_a, 2), ruleName = _h[0], meta = _h[1].meta;
        all[meta.ngrxModule] = ((_b = all[meta.ngrxModule]) !== null && _b !== void 0 ? _b : []).concat([
            [
                "[@ngrx/".concat(ruleName, "]").concat(((_c = meta.docs) === null || _c === void 0 ? void 0 : _c.url)
                    ? '(' +
                        meta.docs.url
                            .replace('https://ngrx.io', '')
                            .replace('.md', '') +
                        ')'
                    : ''),
                (_e = (_d = meta.docs) === null || _d === void 0 ? void 0 : _d.description) !== null && _e !== void 0 ? _e : 'TODO',
                meta.type,
                "".concat((_f = meta.docs) === null || _f === void 0 ? void 0 : _f.recommended),
                meta.fixable ? 'Yes' : 'No',
                meta.hasSuggestions ? 'Yes' : 'No',
                meta.schema.length ? 'Yes' : 'No',
                ((_g = meta.docs) === null || _g === void 0 ? void 0 : _g.requiresTypeChecking) ? 'Yes' : 'No',
            ],
        ]);
        return all;
    }, {});
    var tableHeader = "| Name | Description | Recommended | Category | Fixable | Has suggestions | Configurable | Requires type information\n| --- | --- | --- | --- | --- | --- | --- | --- |";
    var configTable = Object.entries(moduleRules).map(function (_a) {
        var _b = __read(_a, 2), ngrxModule = _b[0], pluginRules = _b[1];
        var tableBody = pluginRules
            .map(function (rule) { return "|".concat(rule.join('|'), "|"); })
            .join(os_1.EOL);
        var table = [tableHeader, tableBody].join(os_1.EOL);
        return ["### ".concat(ngrxModule), table].join(os_1.EOL);
    });
    var overview = (0, fs_1.readFileSync)(OVERVIEW, 'utf-8');
    var start = overview.indexOf('<!-- RULES-CONFIG:START -->');
    var end = overview.indexOf('<!-- RULES-CONFIG:END -->');
    var newOverview = (0, prettier_1.format)("".concat(overview.substring(0, start + '<!-- RULES-CONFIG:START -->'.length), "\n").concat(configTable.join(os_1.EOL), "\n").concat(overview.substring(end)), __assign({ parser: 'markdown' }, prettierConfig));
    (0, fs_1.writeFileSync)(OVERVIEW, newOverview);
}
function generateConfigurations() {
    var tableHeader = "| Name |\n  | --- |";
    var config = Object.keys(configs_1.configs);
    var overview = (0, fs_1.readFileSync)(OVERVIEW, 'utf-8');
    var start = overview.indexOf('<!-- CONFIGURATIONS-CONFIG:START -->');
    var end = overview.indexOf('<!-- CONFIGURATIONS-CONFIG:END -->');
    var configTable = config.map(function (configName) { return "| [".concat(configName, "](").concat(GH_CONFIGS, "/").concat(configName, ".ts) |"); });
    var newOverview = (0, prettier_1.format)("".concat(overview.substring(0, start + '<!-- CONFIGURATIONS-CONFIG:START -->'.length), "\n  ").concat(__spreadArray([tableHeader], __read(configTable), false).join(os_1.EOL), "\n  ").concat(overview.substring(end)), __assign({ parser: 'markdown' }, prettierConfig));
    (0, fs_1.writeFileSync)(OVERVIEW, newOverview);
}
//# sourceMappingURL=generate-overview.js.map