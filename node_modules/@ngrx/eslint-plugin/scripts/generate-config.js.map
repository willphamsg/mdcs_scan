{"version":3,"file":"generate-config.js","sourceRoot":"","sources":["../../../../modules/eslint-plugin/scripts/generate-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { format, resolveConfig } from 'prettier';\nimport type { NgRxRuleModule } from '../src/rule-creator';\nimport { rules } from '../src/rules';\n\nconst prettierConfig = resolveConfig.sync(__dirname);\n\nconst RULE_MODULE = '@ngrx';\nconst CONFIG_DIRECTORY = './modules/eslint-plugin/src/configs/';\n\nwriteConfig(\n  'recommended',\n  (rule) =>\n    !!rule.meta.docs?.recommended && !rule.meta.docs?.requiresTypeChecking\n);\n\nwriteConfig('all', (rule) => !rule.meta.docs?.requiresTypeChecking);\n\nwriteConfig(\n  'strict',\n  (rule) => !rule.meta.docs?.requiresTypeChecking,\n  () => 'error'\n);\n\nwriteConfig(\n  'recommended-requiring-type-checking',\n  (rule) => !!rule.meta.docs?.recommended\n);\n\nwriteConfig('all-requiring-type-checking', () => true);\n\nwriteConfig(\n  'strict-requiring-type-checking',\n  () => true,\n  () => 'error'\n);\n\nwriteConfig(\n  'store',\n  (rule) =>\n    rule.meta.ngrxModule === 'store' && !rule.meta.docs?.requiresTypeChecking\n);\n\nwriteConfig(\n  'store-strict',\n  (rule) =>\n    rule.meta.ngrxModule === 'store' && !rule.meta.docs?.requiresTypeChecking,\n  () => 'error'\n);\n\nwriteConfig(\n  'effects',\n  (rule) =>\n    rule.meta.ngrxModule === 'effects' && !rule.meta.docs?.requiresTypeChecking\n);\n\nwriteConfig(\n  'effects-strict',\n  (rule) =>\n    rule.meta.ngrxModule === 'effects' && !rule.meta.docs?.requiresTypeChecking,\n  () => 'error'\n);\n\nwriteConfig(\n  'effects-requiring-type-checking',\n  (rule) => rule.meta.ngrxModule === 'effects'\n);\n\nwriteConfig(\n  'effects-strict-requiring-type-checking',\n  (rule) => rule.meta.ngrxModule === 'effects',\n  () => 'error'\n);\n\nwriteConfig(\n  'component-store',\n  (rule) =>\n    rule.meta.ngrxModule === 'component-store' &&\n    !rule.meta.docs?.requiresTypeChecking\n);\n\nwriteConfig(\n  'component-store-strict',\n  (rule) =>\n    rule.meta.ngrxModule === 'component-store' &&\n    !rule.meta.docs?.requiresTypeChecking,\n  () => 'error'\n);\n\nfunction writeConfig(\n  configName:\n    | 'all'\n    | 'recommended'\n    | 'strict'\n    | 'all-requiring-type-checking'\n    | 'recommended-requiring-type-checking'\n    | 'strict-requiring-type-checking'\n    | 'store'\n    | 'store-strict'\n    | 'effects'\n    | 'effects-requiring-type-checking'\n    | 'effects-strict'\n    | 'effects-strict-requiring-type-checking'\n    | 'component-store'\n    | 'component-store-strict',\n  predicate: (rule: NgRxRuleModule<[], string>) => boolean,\n  setting = (rule: NgRxRuleModule<[], string>) =>\n    rule.meta.docs?.recommended || 'warn'\n) {\n  const rulesForConfig = Object.entries(rules).filter(([_, rule]) =>\n    predicate(rule)\n  );\n  const configRules = rulesForConfig.reduce<Record<string, string>>(\n    (rules, [ruleName, rule]) => {\n      rules[`${RULE_MODULE}/${ruleName}`] = setting(rule);\n      return rules;\n    },\n    {}\n  );\n  const parserOptions: null | Record<string, string | number> =\n    rulesForConfig.some(([_, rule]) => rule.meta.docs?.requiresTypeChecking)\n      ? {\n          ecmaVersion: 2020,\n          sourceType: 'module',\n          project: './tsconfig.json',\n        }\n      : null;\n\n  const code = `\n/**\n * DO NOT EDIT\n * This file is generated\n */\n\nexport = {\n  parser: \"@typescript-eslint/parser\",\n  ${parserOptions ? `parserOptions: ${JSON.stringify(parserOptions)},` : ''}\n  plugins: [\"${RULE_MODULE}\"],\n  rules: ${JSON.stringify(configRules)},\n}\n`;\n  const config = format(code, {\n    parser: 'typescript',\n    ...prettierConfig,\n  });\n  writeFileSync(join(CONFIG_DIRECTORY, `${configName}.ts`), config);\n}\n"]}