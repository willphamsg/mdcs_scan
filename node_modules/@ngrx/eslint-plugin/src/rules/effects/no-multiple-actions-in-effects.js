"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var eslint_etc_1 = require("eslint-etc");
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.messageId = 'noMultipleActionsInEffects';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'effects',
        docs: {
            description: '`Effect` should not return multiple actions.',
            recommended: 'warn',
            requiresTypeChecking: true,
        },
        schema: [],
        messages: (_a = {},
            _a[exports.messageId] = '`Effect` should return a single action.',
            _a),
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        return _a = {},
            _a["".concat(utils_1.createEffectExpression, " :matches(").concat(utils_1.mapLikeOperatorsImplicitReturn, ", ").concat(utils_1.mapLikeOperatorsExplicitReturn, ")")] = function (node) {
                var nodeToReport = getNodeToReport(node);
                if (!nodeToReport ||
                    !(0, eslint_etc_1.getTypeServices)(context).couldBeType(nodeToReport, 'Array')) {
                    return;
                }
                context.report({
                    node: nodeToReport,
                    messageId: exports.messageId,
                });
            },
            _a;
    },
});
function getNodeToReport(node) {
    switch (node.type) {
        case experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression:
            return node.body;
        case experimental_utils_1.AST_NODE_TYPES.CallExpression:
            return node.arguments[0];
        default:
            return node.argument;
    }
}
//# sourceMappingURL=no-multiple-actions-in-effects.js.map