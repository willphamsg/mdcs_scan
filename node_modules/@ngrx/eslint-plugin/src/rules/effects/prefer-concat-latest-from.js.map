{"version":3,"file":"prefer-concat-latest-from.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/effects/prefer-concat-latest-from.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isArrowFunctionExpression } from 'eslint-etc';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport {\n  asPattern,\n  createEffectExpression,\n  getImportAddFix,\n  getNgRxEffectActions,\n  namedExpression,\n  NGRX_MODULE_PATHS,\n} from '../../utils';\n\nexport const messageId = 'preferConcatLatestFrom';\n\ntype MessageIds = typeof messageId;\ntype Options = readonly [{ readonly strict: boolean }];\ntype WithLatestFromIdentifier = TSESTree.Identifier & {\n  parent: TSESTree.CallExpression;\n};\n\nconst defaultOptions: Options[number] = { strict: false };\nconst concatLatestFromKeyword = 'concatLatestFrom';\nconst withLatestFromKeyword = 'withLatestFrom';\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'problem',\n    ngrxModule: 'effects',\n    version: '>=12.0.0',\n    docs: {\n      description: `Use \\`${concatLatestFromKeyword}\\` instead of \\`${withLatestFromKeyword}\\` to prevent the selector from firing until the correct \\`Action\\` is dispatched.`,\n      recommended: 'warn',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          strict: {\n            type: 'boolean',\n            default: defaultOptions.strict,\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n    messages: {\n      [messageId]: `Use \\`${concatLatestFromKeyword}\\` instead of \\`${withLatestFromKeyword}\\`.`,\n    },\n  },\n  defaultOptions: [defaultOptions],\n  create: (context, [options]) => {\n    if (options.strict) {\n      return {\n        [`${createEffectExpression} CallExpression > Identifier[name='withLatestFrom']`](\n          node: WithLatestFromIdentifier\n        ) {\n          context.report({\n            node,\n            messageId,\n            fix: (fixer) => getFixes(context.getSourceCode(), fixer, node),\n          });\n        },\n      };\n    }\n\n    const { identifiers = [], sourceCode } = getNgRxEffectActions(context);\n    const actionsNames = identifiers.length > 0 ? asPattern(identifiers) : null;\n\n    if (!actionsNames) {\n      return {};\n    }\n\n    return {\n      [`${createEffectExpression} ${namedExpression(\n        actionsNames\n      )} > CallExpression[arguments.length=1] > Identifier[name='${withLatestFromKeyword}']`](\n        node: WithLatestFromIdentifier\n      ) {\n        context.report({\n          node,\n          messageId,\n          fix: (fixer) => getFixes(sourceCode, fixer, node),\n        });\n      },\n      [`${createEffectExpression} ${namedExpression(\n        actionsNames\n      )} > CallExpression[arguments.length>1] > Identifier[name='${withLatestFromKeyword}']`](\n        node: WithLatestFromIdentifier\n      ) {\n        context.report({\n          node,\n          messageId,\n        });\n      },\n    };\n  },\n});\n\nfunction getFixes(\n  sourceCode: Readonly<TSESLint.SourceCode>,\n  fixer: TSESLint.RuleFixer,\n  node: WithLatestFromIdentifier\n) {\n  const { parent } = node;\n  const isUsingDeprecatedProjectorArgument = parent.arguments.length > 1;\n  const [firstArgument] = parent.arguments;\n  const nextToken =\n    isUsingDeprecatedProjectorArgument &&\n    sourceCode.getTokenAfter(firstArgument);\n  return [\n    fixer.replaceText(node, concatLatestFromKeyword),\n    ...(isArrowFunctionExpression(firstArgument)\n      ? []\n      : [fixer.insertTextBefore(firstArgument, '() => ')]),\n  ].concat(\n    getImportAddFix({\n      fixer,\n      importName: concatLatestFromKeyword,\n      moduleName: NGRX_MODULE_PATHS.effects,\n      node,\n    }),\n    ...(isUsingDeprecatedProjectorArgument && nextToken\n      ? [\n          getImportAddFix({\n            fixer,\n            importName: 'map',\n            moduleName: 'rxjs/operators',\n            node,\n          }),\n          fixer.insertTextAfterRange(nextToken.range, '), map('),\n        ]\n      : [])\n  );\n}\n"]}