{"version":3,"file":"use-effects-lifecycle-interface.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/effects/use-effects-lifecycle-interface.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAA6B;AAC7B,mDAAgD;AAChD,qCAKqB;AAER,QAAA,SAAS,GAAG,8BAA8B,CAAC;AAKxD,kBAAe,IAAA,yBAAU,EAAsB;IAC7C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,UAAU,EAAE,SAAS;QACrB,IAAI,EAAE;YACJ,WAAW,EACT,iGAAiG;YACnG,WAAW,EAAE,MAAM;SACpB;QACD,OAAO,EAAE,MAAM;QACf,MAAM,EAAE,EAAE;QACV,QAAQ;YACN,GAAC,iBAAS,IACR,gGAAgG;eACnG;KACF;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,UAAC,OAAO;;QACd,IAAM,eAAe,GAAG;YACtB,qBAAqB,EAAE,mBAAmB;YAC1C,iBAAiB,EAAE,eAAe;YAClC,gBAAgB,EAAE,cAAc;SACxB,CAAC;QACX,IAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEjE;YACE,GAAC,6EAAsE,iBAAiB,OAAI,IAA5F,UACE,IAKC;gBAED,IAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;gBACnD,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC7B,IAAM,aAAa,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;gBAElD,IAAI,IAAA,oBAAY,EAAC,gBAAgB,EAAE,aAAa,CAAC,EAAE,CAAC;oBAClD,OAAO;gBACT,CAAC;gBAED,OAAO,CAAC,MAAM,CAAC;oBACb,GAAG,EAAE,UAAC,KAAK;wBACH,IAAA,KACJ,IAAA,gCAAwB,EAAC,gBAAgB,EAAE,aAAa,CAAC,EADnD,qBAAqB,2BAAA,EAAE,qBAAqB,2BACO,CAAC;wBAC5D,OAAO;4BACL,KAAK,CAAC,eAAe,CACnB,qBAAqB,EACrB,qBAAqB,CACtB;yBACF,CAAC,MAAM,CACN,IAAA,uBAAe,EAAC;4BACd,4BAA4B,EAAE,IAAI;4BAClC,KAAK,OAAA;4BACL,UAAU,EAAE,aAAa;4BACzB,UAAU,EAAE,yBAAiB,CAAC,OAAO;4BACrC,IAAI,EAAE,gBAAgB;yBACvB,CAAC,CACH,CAAC;oBACJ,CAAC;oBACD,IAAI,MAAA;oBACJ,SAAS,mBAAA;oBACT,IAAI,EAAE;wBACJ,aAAa,eAAA;wBACb,UAAU,YAAA;qBACX;iBACF,CAAC,CAAC;YACL,CAAC;eACD;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport {\n  getImplementsSchemaFixer,\n  getImportAddFix,\n  getInterface,\n  NGRX_MODULE_PATHS,\n} from '../../utils';\n\nexport const messageId = 'useEffectsLifecycleInterface';\n\ntype MessageIds = typeof messageId;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    ngrxModule: 'effects',\n    docs: {\n      description:\n        'Ensures classes implement lifecycle interfaces corresponding to the declared lifecycle methods.',\n      recommended: 'warn',\n    },\n    fixable: 'code',\n    schema: [],\n    messages: {\n      [messageId]:\n        'Lifecycle interface `{{ interfaceName }}` should be implemented for method `{{ methodName }}`.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    const lifecycleMapper = {\n      ngrxOnIdentifyEffects: 'OnIdentifyEffects',\n      ngrxOnInitEffects: 'OnInitEffects',\n      ngrxOnRunEffects: 'OnRunEffects',\n    } as const;\n    const lifecyclesPattern = Object.keys(lifecycleMapper).join('|');\n\n    return {\n      [`ClassDeclaration > ClassBody > MethodDefinition > Identifier[name=/${lifecyclesPattern}/]`](\n        node: TSESTree.Identifier & {\n          name: keyof typeof lifecycleMapper;\n          parent: TSESTree.MethodDefinition & {\n            parent: TSESTree.ClassBody & { parent: TSESTree.ClassDeclaration };\n          };\n        }\n      ) {\n        const classDeclaration = node.parent.parent.parent;\n        const methodName = node.name;\n        const interfaceName = lifecycleMapper[methodName];\n\n        if (getInterface(classDeclaration, interfaceName)) {\n          return;\n        }\n\n        context.report({\n          fix: (fixer) => {\n            const { implementsNodeReplace, implementsTextReplace } =\n              getImplementsSchemaFixer(classDeclaration, interfaceName);\n            return [\n              fixer.insertTextAfter(\n                implementsNodeReplace,\n                implementsTextReplace\n              ),\n            ].concat(\n              getImportAddFix({\n                compatibleWithTypeOnlyImport: true,\n                fixer,\n                importName: interfaceName,\n                moduleName: NGRX_MODULE_PATHS.effects,\n                node: classDeclaration,\n              })\n            );\n          },\n          node,\n          messageId,\n          data: {\n            interfaceName,\n            methodName,\n          },\n        });\n      },\n    };\n  },\n});\n"]}