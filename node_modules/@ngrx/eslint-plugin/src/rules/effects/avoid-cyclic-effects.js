"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
var eslint_etc_1 = require("eslint-etc");
var path = __importStar(require("path"));
var ts = __importStar(require("typescript"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.messageId = 'avoidCyclicEffects';
// This rule is a modified version (to support dispatch: false) from the eslint-plugin-rxjs plugin.
// The original implementation can be found at https://github.com/cartant/eslint-plugin-rxjs/blob/main/source/rules/no-cyclic-action.ts
// Thank you Nicholas Jamieson (@cartant).
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'effects',
        docs: {
            description: 'Avoid `Effect` that re-emit filtered actions.',
            recommended: 'warn',
            requiresTypeChecking: true,
        },
        schema: [],
        messages: (_a = {},
            _a[exports.messageId] = '`Effect` that re-emit filtered actions are forbidden.',
            _a),
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        var _b = (0, utils_1.getNgRxEffectActions)(context).identifiers, identifiers = _b === void 0 ? [] : _b;
        var actionsNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!actionsNames) {
            return {};
        }
        var _c = (0, eslint_etc_1.getTypeServices)(context), getType = _c.getType, typeChecker = _c.typeChecker;
        function checkNode(pipeCallExpression) {
            var e_1, _a;
            var operatorCallExpression = pipeCallExpression.arguments.find(function (arg) {
                return (0, utils_1.isCallExpression)(arg) &&
                    (0, utils_1.isIdentifier)(arg.callee) &&
                    arg.callee.name === 'ofType';
            });
            if (!operatorCallExpression) {
                return;
            }
            var operatorType = getType(operatorCallExpression);
            var _b = __read(typeChecker.getSignaturesOfType(operatorType, ts.SignatureKind.Call), 1), signature = _b[0];
            if (!signature) {
                return;
            }
            var operatorReturnType = typeChecker.getReturnTypeOfSignature(signature);
            if (!(0, utils_1.isTypeReference)(operatorReturnType)) {
                return;
            }
            var _c = __read(typeChecker.getTypeArguments(operatorReturnType), 1), operatorElementType = _c[0];
            if (!operatorElementType) {
                return;
            }
            var pipeType = getType(pipeCallExpression);
            if (!(0, utils_1.isTypeReference)(pipeType)) {
                return;
            }
            var _d = __read(typeChecker.getTypeArguments(pipeType), 1), pipeElementType = _d[0];
            if (!pipeElementType) {
                return;
            }
            var operatorActionTypes = getActionTypes(operatorElementType);
            var pipeActionTypes = getActionTypes(pipeElementType);
            try {
                for (var operatorActionTypes_1 = __values(operatorActionTypes), operatorActionTypes_1_1 = operatorActionTypes_1.next(); !operatorActionTypes_1_1.done; operatorActionTypes_1_1 = operatorActionTypes_1.next()) {
                    var actionType = operatorActionTypes_1_1.value;
                    if (pipeActionTypes.includes(actionType)) {
                        context.report({
                            node: pipeCallExpression.callee,
                            messageId: exports.messageId,
                        });
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (operatorActionTypes_1_1 && !operatorActionTypes_1_1.done && (_a = operatorActionTypes_1.return)) _a.call(operatorActionTypes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        function getActionType(symbol) {
            var valueDeclaration = symbol.valueDeclaration;
            if (!valueDeclaration) {
                return null;
            }
            if (valueDeclaration.kind === ts.SyntaxKind.PropertyDeclaration) {
                var parent_1 = symbol.parent;
                return parent_1.valueDeclaration
                    ? typeChecker.getTypeOfSymbolAtLocation(parent_1, parent_1.valueDeclaration)
                    : null;
            }
            return typeChecker.getTypeOfSymbolAtLocation(symbol, valueDeclaration);
        }
        function getActionTypes(type) {
            var e_2, _a;
            if (type.isUnion()) {
                var memberActionTypes = [];
                try {
                    for (var _b = __values(type.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var memberType = _c.value;
                        memberActionTypes.push.apply(memberActionTypes, __spreadArray([], __read(getActionTypes(memberType)), false));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return memberActionTypes;
            }
            var symbol = typeChecker.getPropertyOfType(type, 'type');
            if (!symbol) {
                return [];
            }
            var actionType = getActionType(symbol);
            if (!actionType) {
                return [];
            }
            // TODO: support "dynamic" types
            // e.g. const genericFoo = createAction(`${subject} FOO`); (resolves to 'string')
            if (typeChecker.typeToString(actionType) === 'string') {
                return [];
            }
            return [typeChecker.typeToString(actionType)];
        }
        var firstPipe = true;
        return _a = {},
            _a["".concat(utils_1.createEffectExpression, ":not([arguments.1]:has(Property[key.name='dispatch'][value.value=false])) CallExpression[callee.property.name='pipe'][callee.object.property.name=").concat(actionsNames, "]")] = function (node) {
                if (firstPipe) {
                    checkNode(node);
                    firstPipe = false;
                    return;
                }
            },
            _a["".concat(utils_1.createEffectExpression, ":not([arguments.1]:has(Property[key.name='dispatch'][value.value=false])) CallExpression[callee.property.name='pipe']:exit")] = function () {
                firstPipe = true;
            },
            _a;
    },
});
//# sourceMappingURL=avoid-cyclic-effects.js.map