"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.messageId = 'preferEffectCallbackInBlockStatement';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'effects',
        docs: {
            description: 'A block statement is easier to troubleshoot.',
            recommended: 'warn',
        },
        schema: [],
        messages: (_a = {},
            _a[exports.messageId] = 'The callback of `Effect` should be wrapped in a block statement.',
            _a),
        fixable: 'code',
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        var sourceCode = context.getSourceCode();
        var nonParametrizedEffect = "".concat(utils_1.createEffectExpression, " > ArrowFunctionExpression > .body[type!=/^(ArrowFunctionExpression|BlockStatement)$/]");
        var parametrizedEffect = "".concat(utils_1.createEffectExpression, " > ArrowFunctionExpression > ArrowFunctionExpression > .body[type!='BlockStatement']");
        var parametrizedEffectWithinBlockStatement = "".concat(utils_1.createEffectExpression, " > ArrowFunctionExpression > BlockStatement > ReturnStatement > ArrowFunctionExpression > .body[type!='BlockStatement']");
        return _a = {},
            _a["".concat(nonParametrizedEffect, ", ").concat(parametrizedEffect, ", ").concat(parametrizedEffectWithinBlockStatement)] = function (node) {
                context.report({
                    node: node,
                    messageId: exports.messageId,
                    fix: function (fixer) {
                        var _a = __read(getSafeNodesToApplyFix(sourceCode, node), 2), previousNode = _a[0], nextNode = _a[1];
                        return [
                            fixer.insertTextBefore(previousNode, "{ return "),
                            fixer.insertTextAfter(nextNode, " }"),
                        ];
                    },
                });
            },
            _a;
    },
});
function getSafeNodesToApplyFix(sourceCode, node) {
    var previousToken = sourceCode.getTokenBefore(node);
    var nextToken = sourceCode.getTokenAfter(node);
    if (previousToken &&
        experimental_utils_1.ASTUtils.isOpeningParenToken(previousToken) &&
        nextToken &&
        experimental_utils_1.ASTUtils.isClosingParenToken(nextToken)) {
        return [previousToken, nextToken];
    }
    return [node, node];
}
//# sourceMappingURL=prefer-effect-callback-in-block-statement.js.map