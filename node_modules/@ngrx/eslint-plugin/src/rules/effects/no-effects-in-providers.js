"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.messageId = 'noEffectsInProviders';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'effects',
        docs: {
            description: '`Effect` should not be listed as a provider if it is added to the `EffectsModule`.',
            recommended: 'error',
        },
        fixable: 'code',
        schema: [],
        messages: (_a = {},
            _a[exports.messageId] = '`Effect` should not be listed as a provider if it is added to the `EffectsModule`.',
            _a),
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        var sourceCode = context.getSourceCode();
        var effectsInProviders = new Set();
        var effectsInImports = new Set();
        return _a = {},
            _a[utils_1.effectsInNgModuleProviders] = function (node) {
                effectsInProviders.add(node);
            },
            _a[utils_1.effectsInNgModuleImports] = function (_a) {
                var name = _a.name;
                effectsInImports.add(name);
            },
            _a["".concat(utils_1.ngModuleDecorator, ":exit")] = function () {
                var e_1, _a;
                var _loop_1 = function (effectInProvider) {
                    if (!effectsInImports.has(effectInProvider.name)) {
                        return "continue";
                    }
                    context.report({
                        node: effectInProvider,
                        messageId: exports.messageId,
                        fix: function (fixer) {
                            return (0, utils_1.getNodeToCommaRemoveFix)(sourceCode, fixer, effectInProvider);
                        },
                    });
                };
                try {
                    for (var effectsInProviders_1 = __values(effectsInProviders), effectsInProviders_1_1 = effectsInProviders_1.next(); !effectsInProviders_1_1.done; effectsInProviders_1_1 = effectsInProviders_1.next()) {
                        var effectInProvider = effectsInProviders_1_1.value;
                        _loop_1(effectInProvider);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (effectsInProviders_1_1 && !effectsInProviders_1_1.done && (_a = effectsInProviders_1.return)) _a.call(effectsInProviders_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                effectsInImports.clear();
                effectsInProviders.clear();
            },
            _a;
    },
});
//# sourceMappingURL=no-effects-in-providers.js.map