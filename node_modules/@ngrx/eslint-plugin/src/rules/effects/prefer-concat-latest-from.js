"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
var eslint_etc_1 = require("eslint-etc");
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.messageId = 'preferConcatLatestFrom';
var defaultOptions = { strict: false };
var concatLatestFromKeyword = 'concatLatestFrom';
var withLatestFromKeyword = 'withLatestFrom';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'effects',
        version: '>=12.0.0',
        docs: {
            description: "Use `".concat(concatLatestFromKeyword, "` instead of `").concat(withLatestFromKeyword, "` to prevent the selector from firing until the correct `Action` is dispatched."),
            recommended: 'warn',
        },
        fixable: 'code',
        schema: [
            {
                type: 'object',
                properties: {
                    strict: {
                        type: 'boolean',
                        default: defaultOptions.strict,
                    },
                },
                additionalProperties: false,
            },
        ],
        messages: (_a = {},
            _a[exports.messageId] = "Use `".concat(concatLatestFromKeyword, "` instead of `").concat(withLatestFromKeyword, "`."),
            _a),
    },
    defaultOptions: [defaultOptions],
    create: function (context, _a) {
        var _b, _c;
        var _d = __read(_a, 1), options = _d[0];
        if (options.strict) {
            return _b = {},
                _b["".concat(utils_1.createEffectExpression, " CallExpression > Identifier[name='withLatestFrom']")] = function (node) {
                    context.report({
                        node: node,
                        messageId: exports.messageId,
                        fix: function (fixer) { return getFixes(context.getSourceCode(), fixer, node); },
                    });
                },
                _b;
        }
        var _e = (0, utils_1.getNgRxEffectActions)(context), _f = _e.identifiers, identifiers = _f === void 0 ? [] : _f, sourceCode = _e.sourceCode;
        var actionsNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!actionsNames) {
            return {};
        }
        return _c = {},
            _c["".concat(utils_1.createEffectExpression, " ").concat((0, utils_1.namedExpression)(actionsNames), " > CallExpression[arguments.length=1] > Identifier[name='").concat(withLatestFromKeyword, "']")] = function (node) {
                context.report({
                    node: node,
                    messageId: exports.messageId,
                    fix: function (fixer) { return getFixes(sourceCode, fixer, node); },
                });
            },
            _c["".concat(utils_1.createEffectExpression, " ").concat((0, utils_1.namedExpression)(actionsNames), " > CallExpression[arguments.length>1] > Identifier[name='").concat(withLatestFromKeyword, "']")] = function (node) {
                context.report({
                    node: node,
                    messageId: exports.messageId,
                });
            },
            _c;
    },
});
function getFixes(sourceCode, fixer, node) {
    var _a;
    var parent = node.parent;
    var isUsingDeprecatedProjectorArgument = parent.arguments.length > 1;
    var _b = __read(parent.arguments, 1), firstArgument = _b[0];
    var nextToken = isUsingDeprecatedProjectorArgument &&
        sourceCode.getTokenAfter(firstArgument);
    return (_a = __spreadArray([
        fixer.replaceText(node, concatLatestFromKeyword)
    ], __read(((0, eslint_etc_1.isArrowFunctionExpression)(firstArgument)
        ? []
        : [fixer.insertTextBefore(firstArgument, '() => ')])), false)).concat.apply(_a, __spreadArray([(0, utils_1.getImportAddFix)({
            fixer: fixer,
            importName: concatLatestFromKeyword,
            moduleName: utils_1.NGRX_MODULE_PATHS.effects,
            node: node,
        })], __read((isUsingDeprecatedProjectorArgument && nextToken
        ? [
            (0, utils_1.getImportAddFix)({
                fixer: fixer,
                importName: 'map',
                moduleName: 'rxjs/operators',
                node: node,
            }),
            fixer.insertTextAfterRange(nextToken.range, '), map('),
        ]
        : [])), false));
}
//# sourceMappingURL=prefer-concat-latest-from.js.map