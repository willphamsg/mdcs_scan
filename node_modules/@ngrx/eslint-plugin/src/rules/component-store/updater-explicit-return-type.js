"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.messageId = 'updaterExplicitReturnType';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'problem',
        ngrxModule: 'component-store',
        docs: {
            description: '`Updater` should have an explicit return type.',
            recommended: 'warn',
        },
        schema: [],
        messages: (_a = {},
            _a[exports.messageId] = '`Updater` should have an explicit return type when using arrow functions: `this.store.updater((state, value): State => {}`.',
            _a),
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        var _b = (0, utils_1.getNgRxComponentStores)(context).identifiers, identifiers = _b === void 0 ? [] : _b;
        var storeNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        var withoutTypeAnnotation = "ArrowFunctionExpression:not([returnType.typeAnnotation])";
        var selectors = [
            "ClassDeclaration[superClass.name=/Store/] CallExpression[callee.object.type='ThisExpression'][callee.property.name='updater'] > ".concat(withoutTypeAnnotation),
            storeNames &&
                "".concat((0, utils_1.namedExpression)(storeNames), "[callee.property.name='updater'] > ").concat(withoutTypeAnnotation),
        ]
            .filter(Boolean)
            .join(',');
        return _a = {},
            _a[selectors] = function (node) {
                context.report({
                    node: node,
                    messageId: exports.messageId,
                });
            },
            _a;
    },
});
//# sourceMappingURL=updater-explicit-return-type.js.map