{"version":3,"file":"avoid-dispatching-multiple-actions-sequentially.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/store/avoid-dispatching-multiple-actions-sequentially.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAA6B;AAC7B,mDAAgD;AAChD,qCAA2E;AAE9D,QAAA,SAAS,GAAG,6CAA6C,CAAC;AAKvE,kBAAe,IAAA,yBAAU,EAAsB;IAC7C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,UAAU,EAAE,OAAO;QACnB,IAAI,EAAE;YACJ,WAAW,EAAE,4DAA4D;YACzE,WAAW,EAAE,MAAM;SACpB;QACD,MAAM,EAAE,EAAE;QACV,QAAQ;YACN,GAAC,iBAAS,IACR,0FAA0F;eAC7F;KACF;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,UAAC,OAAO;;QACN,IAAA,KAAqB,IAAA,qBAAa,EAAC,OAAO,CAAC,YAA3B,EAAhB,WAAW,mBAAG,EAAE,KAAA,CAA4B;QACpD,IAAM,UAAU,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,iBAAS,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAE1E,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,IAAM,mBAAmB,GAA8B,EAAE,CAAC;QAE1D;YACE,GAAC,iDAA0C,IAAA,0BAAkB,EAC3D,UAAU,CACX,CAAE,IAFH,UAEK,IAA6B;gBAChC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC;YACD,yBAAqB,GAArB;;gBACE,IAAM,cAAc,GAAG,mBAAmB,CAAC,MAAM,CAAC,UAAC,EAAE;oBACnD,OAAA,mBAAmB,CAAC,IAAI,CACtB,UAAC,EAAE,gBAAK,OAAA,EAAE,KAAK,EAAE,IAAI,CAAA,MAAA,EAAE,CAAC,MAAM,0CAAE,MAAM,OAAK,MAAA,EAAE,CAAC,MAAM,0CAAE,MAAM,CAAA,CAAA,EAAA,CAC7D;gBAFD,CAEC,CACF,CAAC;gBACF,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;;wBAC9B,KAAmB,IAAA,mBAAA,SAAA,cAAc,CAAA,8CAAA,0EAAE,CAAC;4BAA/B,IAAM,IAAI,2BAAA;4BACb,OAAO,CAAC,MAAM,CAAC;gCACb,IAAI,MAAA;gCACJ,SAAS,mBAAA;6BACV,CAAC,CAAC;wBACL,CAAC;;;;;;;;;gBACH,CAAC;gBAED,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC;YACjC,CAAC;eACD;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport { asPattern, dispatchExpression, getNgRxStores } from '../../utils';\n\nexport const messageId = 'avoidDispatchingMultipleActionsSequentially';\n\ntype MessageIds = typeof messageId;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    ngrxModule: 'store',\n    docs: {\n      description: 'It is recommended to only dispatch one `Action` at a time.',\n      recommended: 'warn',\n    },\n    schema: [],\n    messages: {\n      [messageId]:\n        'Avoid dispatching many actions in a row to accomplish a larger conceptual \"transaction\".',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    const { identifiers = [] } = getNgRxStores(context);\n    const storeNames = identifiers.length > 0 ? asPattern(identifiers) : null;\n\n    if (!storeNames) {\n      return {};\n    }\n\n    const collectedDispatches: TSESTree.CallExpression[] = [];\n\n    return {\n      [`BlockStatement > ExpressionStatement > ${dispatchExpression(\n        storeNames\n      )}`](node: TSESTree.CallExpression) {\n        collectedDispatches.push(node);\n      },\n      'BlockStatement:exit'() {\n        const withSameParent = collectedDispatches.filter((d1) =>\n          collectedDispatches.some(\n            (d2) => d2 !== d1 && d2.parent?.parent === d1.parent?.parent\n          )\n        );\n        if (withSameParent.length > 1) {\n          for (const node of withSameParent) {\n            context.report({\n              node,\n              messageId,\n            });\n          }\n        }\n\n        collectedDispatches.length = 0;\n      },\n    };\n  },\n});\n"]}