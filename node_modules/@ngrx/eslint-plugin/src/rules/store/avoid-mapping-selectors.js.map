{"version":3,"file":"avoid-mapping-selectors.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/store/avoid-mapping-selectors.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAA4D;AAC5D,yCAA6B;AAC7B,mDAAgD;AAChD,qCAMqB;AAER,QAAA,SAAS,GAAG,wBAAwB,CAAC;AAKlD,kBAAe,IAAA,yBAAU,EAAsB;IAC7C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,UAAU,EAAE,OAAO;QACnB,IAAI,EAAE;YACJ,WAAW,EAAE,iDAAiD;YAC9D,WAAW,EAAE,MAAM;SACpB;QACD,MAAM,EAAE,EAAE;QACV,QAAQ;YACN,GAAC,iBAAS,IAAG,0CAA0C;eACxD;KACF;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,UAAC,OAAO;;QACN,IAAA,KAAqB,IAAA,qBAAa,EAAC,OAAO,CAAC,YAA3B,EAAhB,WAAW,mBAAG,EAAE,KAAA,CAA4B;QACpD,IAAM,UAAU,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,iBAAS,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAE1E,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,IAAM,4BAA4B,GAAG,UAAG,IAAA,sBAAc,EACpD,UAAU,CACX,mFAAyF,CAAC;QAC3F,IAAM,cAAc,GAAG,UAAG,IAAA,+BAAuB,EAC/C,UAAU,CACX,kDAAwD,CAAC;QAE1D,SAAS,gBAAgB,CAAC,IAA6B;YACrD,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YACzB,OAAO,MAAM,EAAE,CAAC;gBACd,IACE,IAAA,6BAAgB,EAAC,MAAM,CAAC;oBACxB,IAAA,yBAAY,EAAC,MAAM,CAAC,MAAM,CAAC;oBAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,cAAc,EACrC,CAAC;oBACD,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;YACzB,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,IAAI,qBAAqB,GAAG,KAAK,CAAC;QAElC,IAAM,aAAa,GAAG,mBAAY,cAAc,eAAK,4BAA4B,MAAG,CAAC;QACrF;YACE,GAAC,UAAG,aAAa,0CAAuC,IAAxD,UACE,IAA6B;gBAE7B,qBAAqB,GAAG,IAAI,CAAC;YAC/B,CAAC;YACD,GAAC,UAAG,aAAa,qCAAkC,IAAnD,UACE,IAA6B;gBAE7B,IAAI,qBAAqB,EAAE,CAAC;oBAC1B,qBAAqB,GAAG,KAAK,CAAC;oBAC9B,OAAO;gBACT,CAAC;gBAED,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;oBAC3B,OAAO;gBACT,CAAC;gBAED,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;gBACjC,IAAM,WAAW,GAAG,SAAS,CAAC,IAAI,CAChC,UAAC,QAAQ;oBACP,OAAA,IAAA,6BAAgB,EAAC,QAAQ,CAAC;wBAC1B,IAAA,yBAAY,EAAC,QAAQ,CAAC,MAAM,CAAC;wBAC7B,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK;gBAF9B,CAE8B,CACjC,CAAC;gBACF,IAAI,WAAW,EAAE,CAAC;oBAChB,OAAO,CAAC,MAAM,CAAC;wBACb,IAAI,EAAE,WAAW;wBACjB,SAAS,mBAAA;qBACV,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;eACD;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { isCallExpression, isIdentifier } from 'eslint-etc';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport {\n  asPattern,\n  getNgRxStores,\n  isMemberExpression,\n  namedCallableExpression,\n  pipeExpression,\n} from '../../utils';\n\nexport const messageId = 'avoidMapppingSelectors';\n\ntype MessageIds = typeof messageId;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    ngrxModule: 'store',\n    docs: {\n      description: 'Avoid mapping logic outside the selector level.',\n      recommended: 'warn',\n    },\n    schema: [],\n    messages: {\n      [messageId]: 'Map logic at the selector level instead.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    const { identifiers = [] } = getNgRxStores(context);\n    const storeNames = identifiers.length > 0 ? asPattern(identifiers) : null;\n\n    if (!storeNames) {\n      return {};\n    }\n\n    const pipeWithSelectAndMapSelector = `${pipeExpression(\n      storeNames\n    )}:has(CallExpression[callee.name='select'] ~ CallExpression[callee.name='map'])` as const;\n    const selectSelector = `${namedCallableExpression(\n      storeNames\n    )}[callee.object.callee.property.name='select']` as const;\n\n    function isInCreateEffect(node: TSESTree.CallExpression) {\n      let parent = node.parent;\n      while (parent) {\n        if (\n          isCallExpression(parent) &&\n          isIdentifier(parent.callee) &&\n          parent.callee.name === 'createEffect'\n        ) {\n          return true;\n        }\n        parent = parent.parent;\n      }\n      return false;\n    }\n\n    let pipeHasThisExpression = false;\n\n    const selectorQuery = `:matches(${selectSelector}, ${pipeWithSelectAndMapSelector})`;\n    return {\n      [`${selectorQuery} > CallExpression:has(ThisExpression)`](\n        node: TSESTree.CallExpression\n      ) {\n        pipeHasThisExpression = true;\n      },\n      [`${selectorQuery}[callee.property.name=pipe]:exit`](\n        node: TSESTree.CallExpression\n      ) {\n        if (pipeHasThisExpression) {\n          pipeHasThisExpression = false;\n          return;\n        }\n\n        if (isInCreateEffect(node)) {\n          return;\n        }\n\n        const operators = node.arguments;\n        const mapOperator = operators.find(\n          (operator) =>\n            isCallExpression(operator) &&\n            isIdentifier(operator.callee) &&\n            operator.callee.name === 'map'\n        );\n        if (mapOperator) {\n          context.report({\n            node: mapOperator,\n            messageId,\n          });\n        }\n      },\n    };\n  },\n});\n"]}