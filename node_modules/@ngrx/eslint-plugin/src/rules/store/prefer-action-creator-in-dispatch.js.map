{"version":3,"file":"prefer-action-creator-in-dispatch.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/store/prefer-action-creator-in-dispatch.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAA6B;AAC7B,mDAAgD;AAChD,qCAOqB;AAER,QAAA,SAAS,GAAG,+BAA+B,CAAC;AAKzD,kBAAe,IAAA,yBAAU,EAAsB;IAC7C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,UAAU,EAAE,OAAO;QACnB,IAAI,EAAE;YACJ,WAAW,EACT,kFAAkF;YACpF,WAAW,EAAE,MAAM;SACpB;QACD,MAAM,EAAE,EAAE;QACV,QAAQ;YACN,GAAC,iBAAS,IACR,4EAA4E;eAC/E;KACF;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,UAAC,OAAO;;QACN,IAAA,KAAqB,IAAA,qBAAa,EAAC,OAAO,CAAC,YAA3B,EAAhB,WAAW,mBAAG,EAAE,KAAA,CAA4B;QACpD,IAAM,UAAU,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,iBAAS,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAE1E,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED;YACE,GAAC,UAAG,IAAA,0BAAkB,EACpB,UAAU,CACX,qEAAkE,IAFnE,UAGE,IAAwD;gBAExD,IAAM,0BAA0B,GAAG,IAAA,+BAAuB,EACxD,IAAI,EACJ,wBAAgB,CACjB,CAAC;gBACF,IAAM,8BAA8B,GAClC,0BAA0B,KAAK,SAAS;oBACxC,IAAA,4BAAoB,EAClB,0BAA0B,EAC1B,UAAU,EACV,UAAU,CACX,CAAC;gBAEJ,IAAI,CAAC,8BAA8B,EAAE,CAAC;oBACpC,OAAO;gBACT,CAAC;gBAED,OAAO,CAAC,MAAM,CAAC;oBACb,IAAI,MAAA;oBACJ,SAAS,mBAAA;iBACV,CAAC,CAAC;YACL,CAAC;eACD;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport {\n  asPattern,\n  dispatchExpression,\n  getNearestUpperNodeFrom,\n  getNgRxStores,\n  isCallExpression,\n  isCallExpressionWith,\n} from '../../utils';\n\nexport const messageId = 'preferActionCreatorInDispatch';\n\ntype MessageIds = typeof messageId;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    ngrxModule: 'store',\n    docs: {\n      description:\n        'Using `action creator` in `dispatch` is preferred over `object` or old `Action`.',\n      recommended: 'warn',\n    },\n    schema: [],\n    messages: {\n      [messageId]:\n        'Using `object` or old `Action` is forbidden. Use `action creator` instead.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    const { identifiers = [] } = getNgRxStores(context);\n    const storeNames = identifiers.length > 0 ? asPattern(identifiers) : null;\n\n    if (!storeNames) {\n      return {};\n    }\n\n    return {\n      [`${dispatchExpression(\n        storeNames\n      )} :matches(NewExpression, :not(NewExpression) > ObjectExpression)`](\n        node: TSESTree.NewExpression | TSESTree.ObjectExpression\n      ) {\n        const nearestUpperCallExpression = getNearestUpperNodeFrom(\n          node,\n          isCallExpression\n        );\n        const isStoreDispatchImmediateParent =\n          nearestUpperCallExpression !== undefined &&\n          isCallExpressionWith(\n            nearestUpperCallExpression,\n            storeNames,\n            'dispatch'\n          );\n\n        if (!isStoreDispatchImmediateParent) {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId,\n        });\n      },\n    };\n  },\n});\n"]}