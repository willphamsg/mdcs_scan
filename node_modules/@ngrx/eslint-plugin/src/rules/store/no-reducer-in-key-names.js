"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.noReducerInKeyNamesSuggest = exports.noReducerInKeyNames = void 0;
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.noReducerInKeyNames = 'noReducerInKeyNames';
exports.noReducerInKeyNamesSuggest = 'noReducerInKeyNamesSuggest';
var reducerKeyword = 'reducer';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: "Avoid the word \"".concat(reducerKeyword, "\" in the key names."),
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: (_a = {},
            _a[exports.noReducerInKeyNames] = "Avoid the word \"".concat(reducerKeyword, "\" in the key names to better represent the state."),
            _a[exports.noReducerInKeyNamesSuggest] = "Remove the word \"".concat(reducerKeyword, "\"."),
            _a),
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        return _a = {},
            _a[":matches(".concat(utils_1.storeActionReducerMap, ", ").concat(utils_1.actionReducerMap, ") > ").concat((0, utils_1.metadataProperty)(/reducer/i), " > .key")] = function (node) {
                context.report({
                    node: node,
                    messageId: exports.noReducerInKeyNames,
                    suggest: [
                        {
                            messageId: exports.noReducerInKeyNamesSuggest,
                            fix: function (fixer) {
                                var keyName = (0, utils_1.getRawText)(node);
                                if (!keyName) {
                                    return null;
                                }
                                return fixer.replaceText(node, keyName.replace(new RegExp(reducerKeyword, 'i'), ''));
                            },
                        },
                    ],
                });
            },
            _a;
    },
});
//# sourceMappingURL=no-reducer-in-key-names.js.map