{"version":3,"file":"good-action-hygiene.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/store/good-action-hygiene.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAA6B;AAC7B,mDAAgD;AAChD,qCAAuD;AAE1C,QAAA,SAAS,GAAG,mBAAmB,CAAC;AAK7C,kBAAe,IAAA,yBAAU,EAAsB;IAC7C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,UAAU,EAAE,OAAO;QACnB,IAAI,EAAE;YACJ,WAAW,EAAE,yCAAyC;YACtD,WAAW,EAAE,MAAM;SACpB;QACD,MAAM,EAAE,EAAE;QACV,QAAQ;YACN,GAAC,iBAAS,IACR,0IAA0I;eAC7I;KACF;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,UAAC,OAAO;;QACd,IAAM,kBAAkB,GAAG,eAAe,CAAC;QAE3C;YACE,GAAC,gCAAwB,IAAzB,UAA2B,EAI1B;oBAHC,KAAA,uBAAiB,EAAL,IAAI,QAAA;gBAIR,IAAO,UAAU,GAAK,IAAI,MAAT,CAAU;gBAEnC,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;oBACxC,OAAO;gBACT,CAAC;gBAED,OAAO,CAAC,MAAM,CAAC;oBACb,IAAI,MAAA;oBACJ,SAAS,mBAAA;oBACT,IAAI,EAAE;wBACJ,UAAU,YAAA;qBACX;iBACF,CAAC,CAAC;YACL,CAAC;eACD;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport { actionCreatorWithLiteral } from '../../utils';\n\nexport const messageId = 'goodActionHygiene';\n\ntype MessageIds = typeof messageId;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    ngrxModule: 'store',\n    docs: {\n      description: 'Ensures the use of good action hygiene.',\n      recommended: 'warn',\n    },\n    schema: [],\n    messages: {\n      [messageId]:\n        'Action type `{{ actionType }}` does not follow the good action hygiene practice, use \"[Source] {{ actionType }}\" to define action types.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    const sourceEventPattern = /[[].*[\\]]\\s.*/;\n\n    return {\n      [actionCreatorWithLiteral]({\n        arguments: [node],\n      }: Omit<TSESTree.CallExpression, 'arguments'> & {\n        arguments: TSESTree.StringLiteral[];\n      }) {\n        const { value: actionType } = node;\n\n        if (sourceEventPattern.test(actionType)) {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId,\n          data: {\n            actionType,\n          },\n        });\n      },\n    };\n  },\n});\n"]}