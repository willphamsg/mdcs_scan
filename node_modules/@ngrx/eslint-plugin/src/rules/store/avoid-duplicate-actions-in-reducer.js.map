{"version":3,"file":"avoid-duplicate-actions-in-reducer.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/store/avoid-duplicate-actions-in-reducer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAA6B;AAC7B,mDAAgD;AAChD,qCAAqE;AAExD,QAAA,8BAA8B,GAAG,gCAAgC,CAAC;AAClE,QAAA,qCAAqC,GAChD,uCAAuC,CAAC;AAQ1C,kBAAe,IAAA,yBAAU,EAAsB;IAC7C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,cAAc,EAAE,IAAI;QACpB,UAAU,EAAE,OAAO;QACnB,IAAI,EAAE;YACJ,WAAW,EAAE,6CAA6C;YAC1D,WAAW,EAAE,MAAM;YACnB,UAAU,EAAE,IAAI;SACjB;QACD,MAAM,EAAE,EAAE;QACV,QAAQ;YACN,GAAC,sCAA8B,IAC7B,gEAAgE;YAClE,GAAC,6CAAqC,IAAG,0BAA0B;eACpE;KACF;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,UAAC,OAAO;;QACd,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;QAC3C,IAAM,gBAAgB,GAAG,IAAI,GAAG,EAAoB,CAAC;QAErD;YACE,GAAC,UAAG,qBAAa,uEAAoE,IAArF,UAAuF,EAItF;;oBAHC,KAAA,uBAAmB,EAAP,MAAM,QAAA;gBAIlB,IAAM,OAAO,GAAG,MAAA,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,mCAAI,EAAE,CAAC;gBACxD,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,yCAAM,OAAO,YAAE,MAAM,UAAE,CAAC;YAC1D,CAAC;YACD,GAAC,UAAG,qBAAa,UAAO,IAAxB;;;oBACE,KAAwC,IAAA,qBAAA,SAAA,gBAAgB,CAAA,kDAAA,gFAAE,CAAC;wBAAhD,IAAA,KAAA,qCAAyB,EAAxB,UAAU,QAAA,EAAE,WAAW,QAAA;wBACjC,IAAI,WAAW,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;4BAC5B,MAAM;wBACR,CAAC;gDAEU,IAAI;4BACb,OAAO,CAAC,MAAM,CAAC;gCACb,IAAI,MAAA;gCACJ,SAAS,EAAE,sCAA8B;gCACzC,IAAI,EAAE;oCACJ,UAAU,YAAA;iCACX;gCACD,OAAO,EAAE;oCACP;wCACE,SAAS,EAAE,6CAAqC;wCAChD,GAAG,EAAE,UAAC,KAAK;4CACT,OAAA,IAAA,+BAAuB,EAAC,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC;wCAAvD,CAAuD;qCAC1D;iCACF;6BACF,CAAC,CAAC;;;4BAdL,KAAmB,IAAA,+BAAA,SAAA,WAAW,CAAA,CAAA,wCAAA;gCAAzB,IAAM,IAAI,wBAAA;wCAAJ,IAAI;6BAed;;;;;;;;;oBACH,CAAC;;;;;;;;;gBAED,gBAAgB,CAAC,KAAK,EAAE,CAAC;YAC3B,CAAC;eACD;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport { createReducer, getNodeToCommaRemoveFix } from '../../utils';\n\nexport const avoidDuplicateActionsInReducer = 'avoidDuplicateActionsInReducer';\nexport const avoidDuplicateActionsInReducerSuggest =\n  'avoidDuplicateActionsInReducerSuggest';\n\ntype MessageIds =\n  | typeof avoidDuplicateActionsInReducer\n  | typeof avoidDuplicateActionsInReducerSuggest;\ntype Options = readonly [];\ntype Action = TSESTree.Identifier & { parent: TSESTree.CallExpression };\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    hasSuggestions: true,\n    ngrxModule: 'store',\n    docs: {\n      description: 'A `Reducer` should handle an `Action` once.',\n      recommended: 'warn',\n      suggestion: true,\n    },\n    schema: [],\n    messages: {\n      [avoidDuplicateActionsInReducer]:\n        'The `Reducer` handles a duplicate `Action` `{{ actionName }}`.',\n      [avoidDuplicateActionsInReducerSuggest]: 'Remove this duplication.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    const sourceCode = context.getSourceCode();\n    const collectedActions = new Map<string, Action[]>();\n\n    return {\n      [`${createReducer} > CallExpression[callee.name='on'][arguments.0.type='Identifier']`]({\n        arguments: [action],\n      }: TSESTree.CallExpression & {\n        arguments: Action[];\n      }) {\n        const actions = collectedActions.get(action.name) ?? [];\n        collectedActions.set(action.name, [...actions, action]);\n      },\n      [`${createReducer}:exit`]() {\n        for (const [actionName, identifiers] of collectedActions) {\n          if (identifiers.length <= 1) {\n            break;\n          }\n\n          for (const node of identifiers) {\n            context.report({\n              node,\n              messageId: avoidDuplicateActionsInReducer,\n              data: {\n                actionName,\n              },\n              suggest: [\n                {\n                  messageId: avoidDuplicateActionsInReducerSuggest,\n                  fix: (fixer) =>\n                    getNodeToCommaRemoveFix(sourceCode, fixer, node.parent),\n                },\n              ],\n            });\n          }\n        }\n\n        collectedActions.clear();\n      },\n    };\n  },\n});\n"]}