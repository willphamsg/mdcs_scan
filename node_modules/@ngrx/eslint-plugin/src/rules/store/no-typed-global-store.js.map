{"version":3,"file":"no-typed-global-store.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/store/no-typed-global-store.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA6B;AAC7B,mDAAgD;AAChD,qCAMqB;AAGR,QAAA,YAAY,GAAG,cAAc,CAAC;AAC9B,QAAA,mBAAmB,GAAG,qBAAqB,CAAC;AAKzD,kBAAe,IAAA,yBAAU,EAAsB;IAC7C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,cAAc,EAAE,IAAI;QACpB,UAAU,EAAE,OAAO;QACnB,IAAI,EAAE;YACJ,WAAW,EAAE,uCAAuC;YACpD,WAAW,EAAE,MAAM;YACnB,UAAU,EAAE,IAAI;SACjB;QACD,MAAM,EAAE,EAAE;QACV,QAAQ;YACN,GAAC,oBAAY,IACX,qEAAqE;YACvE,GAAC,2BAAmB,IAAG,8BAA8B;eACtD;KACF;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,UAAC,OAAO;QACd,OAAO;YACL,OAAO;;gBACG,IAAA,KAAqB,IAAA,qBAAa,EAAC,OAAO,CAAC,YAA3B,EAAhB,WAAW,mBAAG,EAAE,KAAA,CAA4B;;oBAEpD,KAAyB,IAAA,gBAAA,SAAA,WAAW,CAAA,wCAAA,iEAAE,CAAC;wBAAlC,IAAM,UAAU,wBAAA;wBACnB,iBAAiB;wBACjB,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;4BACvB,IAAA,QAAM,GAAK,UAAU,OAAf,CAAgB;4BAC9B,IACE,IAAA,4BAAoB,EAAC,QAAM,CAAC;gCAC5B,QAAM,CAAC,KAAK;gCACZ,IAAA,wBAAgB,EAAC,QAAM,CAAC,KAAK,CAAC;gCAC9B,QAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAC7B,CAAC;gCACK,IAAA,KAAA,OAAkB,QAAM,CAAC,KAAK,CAAC,SAAS,IAAA,EAAvC,aAAa,QAA0B,CAAC;gCAC/C,IAAI,IAAA,mCAA2B,EAAC,aAAa,CAAC,EAAE,CAAC;oCAC/C,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;gCACvC,CAAC;4BACH,CAAC;4BAED,SAAS;wBACX,CAAC;wBAED,IACE,CAAC,IAAA,yBAAiB,EAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC;4BAC5D,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,cAAc,EACxD,CAAC;4BACD,SAAS;wBACX,CAAC;wBAED,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;oBAClE,CAAC;;;;;;;;;YACH,CAAC;SACF,CAAC;QAEF,SAAS,MAAM,CAAC,cAAqD;YACnE,OAAO,CAAC,MAAM,CAAC;gBACb,IAAI,EAAE,cAAc;gBACpB,SAAS,EAAE,oBAAY;gBACvB,OAAO,EAAE;oBACP;wBACE,SAAS,EAAE,2BAAmB;wBAC9B,GAAG,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,EAA5B,CAA4B;qBAC7C;iBACF;aACF,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport {\n  getNgRxStores,\n  isPropertyDefinition,\n  isTSTypeReference,\n  isCallExpression,\n  isTSInstantiationExpression,\n} from '../../utils';\nimport type { TSESTree } from '@typescript-eslint/experimental-utils';\n\nexport const noTypedStore = 'noTypedStore';\nexport const noTypedStoreSuggest = 'noTypedStoreSuggest';\n\ntype MessageIds = typeof noTypedStore | typeof noTypedStoreSuggest;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    hasSuggestions: true,\n    ngrxModule: 'store',\n    docs: {\n      description: 'The global store should not be typed.',\n      recommended: 'warn',\n      suggestion: true,\n    },\n    schema: [],\n    messages: {\n      [noTypedStore]:\n        '`Store` should not be typed, use `Store` (without generic) instead.',\n      [noTypedStoreSuggest]: 'Remove generic from `Store`.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    return {\n      Program() {\n        const { identifiers = [] } = getNgRxStores(context);\n\n        for (const identifier of identifiers) {\n          // using inject()\n          if (!identifier.typeAnnotation) {\n            const { parent } = identifier;\n            if (\n              isPropertyDefinition(parent) &&\n              parent.value &&\n              isCallExpression(parent.value) &&\n              parent.value.arguments.length\n            ) {\n              const [storeArgument] = parent.value.arguments;\n              if (isTSInstantiationExpression(storeArgument)) {\n                report(storeArgument.typeParameters);\n              }\n            }\n\n            continue;\n          }\n\n          if (\n            !isTSTypeReference(identifier.typeAnnotation.typeAnnotation) ||\n            !identifier.typeAnnotation.typeAnnotation.typeParameters\n          ) {\n            continue;\n          }\n\n          report(identifier.typeAnnotation.typeAnnotation.typeParameters);\n        }\n      },\n    };\n\n    function report(typeParameters: TSESTree.TSTypeParameterInstantiation) {\n      context.report({\n        node: typeParameters,\n        messageId: noTypedStore,\n        suggest: [\n          {\n            messageId: noTypedStoreSuggest,\n            fix: (fixer) => fixer.remove(typeParameters),\n          },\n        ],\n      });\n    }\n  },\n});\n"]}