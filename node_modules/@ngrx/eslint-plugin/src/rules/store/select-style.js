"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectOperator = exports.selectMethod = void 0;
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.selectMethod = 'selectMethod';
exports.selectOperator = 'selectOperator';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'suggestion',
        ngrxModule: 'store',
        docs: {
            description: 'Selector can be used either with `select` as a pipeable operator or as a method.',
            recommended: 'warn',
        },
        fixable: 'code',
        schema: [
            {
                type: 'string',
                enum: ["method" /* SelectStyle.Method */, "operator" /* SelectStyle.Operator */],
                additionalProperties: false,
            },
        ],
        messages: (_a = {},
            _a["method" /* SelectStyle.Method */] = 'Selector should be used with select method: `this.store.select(selector)`.',
            _a["operator" /* SelectStyle.Operator */] = 'Selector should be used with the pipeable operator: `this.store.pipe(select(selector))`.',
            _a),
    },
    defaultOptions: ["method" /* SelectStyle.Method */],
    create: function (context, _a) {
        var _b, _c;
        var _d = __read(_a, 1), mode = _d[0];
        var _e = (0, utils_1.getNgRxStores)(context), _f = _e.identifiers, identifiers = _f === void 0 ? [] : _f, sourceCode = _e.sourceCode;
        var storeNames = identifiers.length > 0 ? (0, utils_1.asPattern)(identifiers) : null;
        if (!storeNames) {
            return {};
        }
        if (mode === "operator" /* SelectStyle.Operator */) {
            return _b = {},
                _b[(0, utils_1.selectExpression)(storeNames)] = function (node) {
                    context.report({
                        node: node.callee.property,
                        messageId: "operator" /* SelectStyle.Operator */,
                        fix: function (fixer) { return getMethodToOperatorFixes(node, fixer); },
                    });
                },
                _b;
        }
        return _c = {},
            _c["Program:has(".concat((0, utils_1.pipeableSelect)(storeNames), ") ImportDeclaration[source.value='").concat(utils_1.NGRX_MODULE_PATHS.store, "'] > ImportSpecifier[imported.name='select']")] = function (node) {
                var e_1, _a;
                context.report({
                    node: node,
                    messageId: "method" /* SelectStyle.Method */,
                    fix: function (fixer) {
                        return (0, utils_1.getImportRemoveFix)(sourceCode, [node.parent], 'select', fixer);
                    },
                });
                var _b = __read(context.getDeclaredVariables(node), 1), references = _b[0].references;
                var _loop_1 = function (identifier) {
                    context.report({
                        node: identifier,
                        messageId: "method" /* SelectStyle.Method */,
                        fix: function (fixer) {
                            return getOperatorToMethodFixes(identifier, sourceCode, fixer);
                        },
                    });
                };
                try {
                    for (var references_1 = __values(references), references_1_1 = references_1.next(); !references_1_1.done; references_1_1 = references_1.next()) {
                        var identifier = references_1_1.value.identifier;
                        _loop_1(identifier);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (references_1_1 && !references_1_1.done && (_a = references_1.return)) _a.call(references_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            },
            _c;
    },
});
function getMethodToOperatorFixes(node, fixer) {
    var classDeclaration = (0, utils_1.getNearestUpperNodeFrom)(node, utils_1.isClassDeclaration);
    if (!classDeclaration) {
        return [];
    }
    return [
        fixer.insertTextBefore(node.callee.property, 'pipe('),
        fixer.insertTextAfter(node, ')'),
    ].concat((0, utils_1.getImportAddFix)({
        fixer: fixer,
        importName: 'select',
        moduleName: utils_1.NGRX_MODULE_PATHS.store,
        node: classDeclaration,
    }));
}
function getOperatorToMethodFixes(identifier, sourceCode, fixer) {
    var _a;
    var select = identifier.parent;
    var storePipe = select === null || select === void 0 ? void 0 : select.parent;
    if (!storePipe ||
        !(0, utils_1.isCallExpression)(storePipe) ||
        !(0, utils_1.isMemberExpression)(storePipe.callee)) {
        return [];
    }
    var pipeContainsOnlySelect = storePipe.arguments.length === 1;
    if (!pipeContainsOnlySelect) {
        var selectContent = sourceCode.getText(select);
        var nextTokenAfterSelect = sourceCode.getTokenAfter(select);
        var store = storePipe.callee.object;
        return __spreadArray(__spreadArray([
            fixer.remove(select)
        ], __read((nextTokenAfterSelect ? [fixer.remove(nextTokenAfterSelect)] : [])), false), [
            fixer.insertTextAfter(store, ".".concat(selectContent)),
        ], false);
    }
    var property = storePipe.callee.property;
    var nextTokenAfterPipe = sourceCode.getTokenAfter(property);
    var _b = __read(property.range, 2), pipeInitialRange = _b[0], pipeEndRange = _b[1];
    var pipeRange = [
        pipeInitialRange,
        (_a = nextTokenAfterPipe === null || nextTokenAfterPipe === void 0 ? void 0 : nextTokenAfterPipe.range[1]) !== null && _a !== void 0 ? _a : pipeEndRange,
    ];
    var _c = __read(identifier.range, 2), selectEndRange = _c[1];
    return [
        fixer.removeRange(pipeRange),
        fixer.insertTextAfterRange([selectEndRange, selectEndRange + 1], '('),
    ];
}
//# sourceMappingURL=select-style.js.map