"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.onFunctionExplicitReturnTypeSuggest = exports.onFunctionExplicitReturnType = void 0;
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.onFunctionExplicitReturnType = 'onFunctionExplicitReturnType';
exports.onFunctionExplicitReturnTypeSuggest = 'onFunctionExplicitReturnTypeSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: '`On` function should have an explicit return type.',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: (_a = {},
            _a[exports.onFunctionExplicitReturnType] = '`On` functions should have an explicit return type when using arrow functions: `on(action, (state): State => {}`.',
            _a[exports.onFunctionExplicitReturnTypeSuggest] = 'Add the explicit return type `State` (if the interface/type is named differently you need to manually correct the return type).',
            _a),
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        var sourceCode = context.getSourceCode();
        return _a = {},
            _a[utils_1.onFunctionWithoutType] = function (node) {
                context.report({
                    node: node,
                    messageId: exports.onFunctionExplicitReturnType,
                    suggest: [
                        {
                            messageId: exports.onFunctionExplicitReturnTypeSuggest,
                            fix: function (fixer) { return getFixes(node, sourceCode, fixer); },
                        },
                    ],
                });
            },
            _a;
    },
});
function getFixes(node, sourceCode, fixer) {
    var params = node.params;
    if (params.length === 0) {
        var _a = __read(sourceCode.getTokens(node), 2), closingParen = _a[1];
        return fixer.insertTextAfter(closingParen, ': State');
    }
    var _b = __read(params, 1), firstParam = _b[0];
    var lastParam = (0, utils_1.getLast)(params);
    var previousToken = sourceCode.getTokenBefore(firstParam);
    var isParenthesized = previousToken && experimental_utils_1.ASTUtils.isOpeningParenToken(previousToken);
    if (isParenthesized) {
        var nextToken = sourceCode.getTokenAfter(lastParam);
        return fixer.insertTextAfter(nextToken !== null && nextToken !== void 0 ? nextToken : lastParam, ': State');
    }
    return [
        fixer.insertTextBefore(firstParam, '('),
        fixer.insertTextAfter(lastParam, '): State'),
    ];
}
//# sourceMappingURL=on-function-explicit-return-type.js.map