{"version":3,"file":"no-multiple-global-stores.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/store/no-multiple-global-stores.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TSESLint, TSESTree } from '@typescript-eslint/experimental-utils';\nimport * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport {\n  getNgRxStores,\n  getNodeToCommaRemoveFix,\n  isTSParameterProperty,\n} from '../../utils';\n\nexport const noMultipleGlobalStores = 'noMultipleGlobalStores';\nexport const noMultipleGlobalStoresSuggest = 'noMultipleGlobalStoresSuggest';\n\ntype MessageIds =\n  | typeof noMultipleGlobalStores\n  | typeof noMultipleGlobalStoresSuggest;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    hasSuggestions: true,\n    ngrxModule: 'store',\n    docs: {\n      description: 'There should only be one global store injected.',\n      recommended: 'warn',\n      suggestion: true,\n    },\n    schema: [],\n    messages: {\n      [noMultipleGlobalStores]: 'Global store should be injected only once.',\n      [noMultipleGlobalStoresSuggest]: 'Remove this reference.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    return {\n      Program() {\n        const { identifiers = [], sourceCode } = getNgRxStores(context);\n        const flattenedIdentifiers = groupBy(identifiers).values();\n\n        for (const identifiers of flattenedIdentifiers) {\n          if (identifiers.length <= 1) {\n            continue;\n          }\n\n          for (const node of identifiers) {\n            const nodeToReport = getNodeToReport(node);\n            context.report({\n              node: nodeToReport,\n              messageId: noMultipleGlobalStores,\n              suggest: [\n                {\n                  messageId: noMultipleGlobalStoresSuggest,\n                  fix: (fixer) => getFixes(sourceCode, fixer, nodeToReport),\n                },\n              ],\n            });\n          }\n        }\n      },\n    };\n  },\n});\n\nfunction getNodeToReport(node: TSESTree.Node) {\n  return node.parent && isTSParameterProperty(node.parent) ? node.parent : node;\n}\n\nfunction getFixes(\n  sourceCode: Readonly<TSESLint.SourceCode>,\n  fixer: TSESLint.RuleFixer,\n  node: TSESTree.Node\n) {\n  const { parent } = node;\n  const nodeToRemove = parent && isTSParameterProperty(parent) ? parent : node;\n  return getNodeToCommaRemoveFix(sourceCode, fixer, nodeToRemove);\n}\n\ntype Identifiers = NonNullable<ReturnType<typeof getNgRxStores>['identifiers']>;\n\nfunction groupBy(identifiers: Identifiers): Map<TSESTree.Node, Identifiers> {\n  return identifiers.reduce<Map<TSESTree.Node, Identifiers>>(\n    (accumulator, identifier) => {\n      const parent = isTSParameterProperty(identifier.parent)\n        ? identifier.parent.parent\n        : identifier.parent;\n      const collectedIdentifiers = accumulator.get(parent);\n      return accumulator.set(parent, [\n        ...(collectedIdentifiers ?? []),\n        identifier,\n      ]);\n    },\n    new Map()\n  );\n}\n"]}