"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.prefixSelectorsWithSelectSuggest = exports.prefixSelectorsWithSelect = void 0;
var path = __importStar(require("path"));
var rule_creator_1 = require("../../rule-creator");
var utils_1 = require("../../utils");
exports.prefixSelectorsWithSelect = 'prefixSelectorsWithSelect';
exports.prefixSelectorsWithSelectSuggest = 'prefixSelectorsWithSelectSuggest';
exports.default = (0, rule_creator_1.createRule)({
    name: path.parse(__filename).name,
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        ngrxModule: 'store',
        docs: {
            description: 'The selector should start with "select", for example "selectThing".',
            recommended: 'warn',
            suggestion: true,
        },
        schema: [],
        messages: (_a = {},
            _a[exports.prefixSelectorsWithSelect] = 'The selector should start with "select".',
            _a[exports.prefixSelectorsWithSelectSuggest] = 'Prefix the selector with "select": `{{ name }}`.',
            _a),
    },
    defaultOptions: [],
    create: function (context) {
        return {
            'VariableDeclarator[id.name!=/^select[^a-z].+$/]:not(:has(Identifier[name="createFeature"])):matches([id.typeAnnotation.typeAnnotation.typeName.name=/^MemoizedSelector(WithProps)?$/], :has(CallExpression[callee.name=/^(create(Feature)?Selector|createSelectorFactory)$/]))': function (_a) {
                var _b;
                var id = _a.id;
                var suggestedName = getSuggestedName(id.name);
                context.report({
                    loc: __assign(__assign({}, id.loc), { end: __assign(__assign({}, id.loc.end), { column: ((_b = id.typeAnnotation) === null || _b === void 0 ? void 0 : _b.range[0])
                                ? id.typeAnnotation.range[0] - 1
                                : id.loc.end.column }) }),
                    messageId: exports.prefixSelectorsWithSelect,
                    suggest: [
                        {
                            messageId: exports.prefixSelectorsWithSelectSuggest,
                            data: {
                                name: suggestedName,
                            },
                            fix: function (fixer) {
                                var _a, _b;
                                return fixer.replaceTextRange([id.range[0], (_b = (_a = id.typeAnnotation) === null || _a === void 0 ? void 0 : _a.range[0]) !== null && _b !== void 0 ? _b : id.range[1]], suggestedName);
                            },
                        },
                    ],
                });
            },
        };
    },
});
function getSuggestedName(name) {
    var selectWord = 'select';
    // Ex: 'selectfeature' => 'selectFeature'
    var possibleReplacedName = name.replace(new RegExp("^".concat(selectWord, "(.+)")), function (_, word) {
        return "".concat(selectWord).concat((0, utils_1.capitalize)(word));
    });
    if (name !== possibleReplacedName) {
        return possibleReplacedName;
    }
    // Ex: 'getCount' => 'selectCount'
    possibleReplacedName = name.replace(/^get([^a-z].+)/, function (_, word) {
        return "".concat(selectWord).concat((0, utils_1.capitalize)(word));
    });
    if (name !== possibleReplacedName) {
        return possibleReplacedName;
    }
    // Ex: 'item' => 'selectItem'
    return "".concat(selectWord).concat((0, utils_1.capitalize)(name));
}
//# sourceMappingURL=prefix-selectors-with-select.js.map