{"version":3,"file":"guards.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/utils/helper-functions/guards.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TSESTree } from '@typescript-eslint/experimental-utils';\nimport { AST_NODE_TYPES } from '@typescript-eslint/experimental-utils';\nimport type * as ts from 'typescript';\n\nconst isNodeOfType =\n  <NodeType extends AST_NODE_TYPES>(nodeType: NodeType) =>\n  (node: TSESTree.Node): node is TSESTree.Node & { type: NodeType } =>\n    node.type === nodeType;\n\nexport const isArrowFunctionExpression = isNodeOfType(\n  AST_NODE_TYPES.ArrowFunctionExpression\n);\nexport const isReturnStatement = isNodeOfType(AST_NODE_TYPES.ReturnStatement);\nexport const isMethodDefinition = isNodeOfType(AST_NODE_TYPES.MethodDefinition);\nexport const isCallExpression = isNodeOfType(AST_NODE_TYPES.CallExpression);\nexport const isClassDeclaration = isNodeOfType(AST_NODE_TYPES.ClassDeclaration);\nexport const isPropertyDefinition = isNodeOfType(\n  AST_NODE_TYPES.PropertyDefinition\n);\nexport const isFunctionExpression = isNodeOfType(\n  AST_NODE_TYPES.FunctionExpression\n);\nexport const isIdentifier = isNodeOfType(AST_NODE_TYPES.Identifier);\nexport const isImportDeclaration = isNodeOfType(\n  AST_NODE_TYPES.ImportDeclaration\n);\nexport const isImportDefaultSpecifier = isNodeOfType(\n  AST_NODE_TYPES.ImportDefaultSpecifier\n);\nexport const isImportNamespaceSpecifier = isNodeOfType(\n  AST_NODE_TYPES.ImportNamespaceSpecifier\n);\nexport const isImportSpecifier = isNodeOfType(AST_NODE_TYPES.ImportSpecifier);\nexport const isLiteral = isNodeOfType(AST_NODE_TYPES.Literal);\nexport const isTemplateElement = isNodeOfType(AST_NODE_TYPES.TemplateElement);\nexport const isTemplateLiteral = isNodeOfType(AST_NODE_TYPES.TemplateLiteral);\nexport const isMemberExpression = isNodeOfType(AST_NODE_TYPES.MemberExpression);\nexport const isProgram = isNodeOfType(AST_NODE_TYPES.Program);\nexport const isThisExpression = isNodeOfType(AST_NODE_TYPES.ThisExpression);\nexport const isTSParameterProperty = isNodeOfType(\n  AST_NODE_TYPES.TSParameterProperty\n);\nexport const isTSTypeAnnotation = isNodeOfType(AST_NODE_TYPES.TSTypeAnnotation);\nexport const isTSTypeReference = isNodeOfType(AST_NODE_TYPES.TSTypeReference);\nexport const isTSInstantiationExpression = isNodeOfType(\n  AST_NODE_TYPES.TSInstantiationExpression\n);\nexport const isObjectExpression = isNodeOfType(AST_NODE_TYPES.ObjectExpression);\nexport const isProperty = isNodeOfType(AST_NODE_TYPES.Property);\n\nexport function isIdentifierOrMemberExpression(\n  node: TSESTree.Node\n): node is TSESTree.Identifier | TSESTree.MemberExpression {\n  return isIdentifier(node) || isMemberExpression(node);\n}\n\nexport function isTypeReference(type: ts.Type): type is ts.TypeReference {\n  return type.hasOwnProperty('target');\n}\n\nfunction equalTo(one: RegExp | string, other: string) {\n  return typeof one === 'string' ? one === other : one.test(other);\n}\n\nexport function isCallExpressionWith(\n  node: TSESTree.CallExpression,\n  objectName: RegExp | string,\n  propertyName: string\n) {\n  return (\n    isMemberExpression(node.callee) &&\n    !node.callee.computed &&\n    node.callee.property.name === propertyName &&\n    ((isIdentifier(node.callee.object) &&\n      equalTo(objectName, node.callee.object.name)) ||\n      (isMemberExpression(node.callee.object) &&\n        isThisExpression(node.callee.object.object) &&\n        isIdentifier(node.callee.object.property) &&\n        equalTo(objectName, node.callee.object.property.name)))\n  );\n}\n"]}