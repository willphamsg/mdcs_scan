"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asPattern = exports.escapeText = exports.getNgRxStores = exports.getNgRxComponentStores = exports.getNgRxEffectActions = exports.capitalize = exports.getRawText = exports.getDecoratorName = exports.getLast = exports.getImplementsSchemaFixer = exports.getInterface = exports.getInterfaces = exports.getInterfaceName = exports.getNodeToCommaRemoveFix = exports.getImportRemoveFix = exports.getImportAddFix = exports.getImportDeclarations = exports.getImportDeclarationSpecifier = exports.getNearestUpperNodeFrom = void 0;
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var guards_1 = require("./guards");
var ngrx_modules_1 = require("./ngrx-modules");
function getNearestUpperNodeFrom(_a, predicate) {
    var parent = _a.parent;
    while (parent && !(0, guards_1.isProgram)(parent)) {
        if (predicate(parent)) {
            return parent;
        }
        parent = parent.parent;
    }
    return undefined;
}
exports.getNearestUpperNodeFrom = getNearestUpperNodeFrom;
function getImportDeclarationSpecifier(importDeclarations, importName) {
    var e_1, _a;
    try {
        for (var importDeclarations_1 = __values(importDeclarations), importDeclarations_1_1 = importDeclarations_1.next(); !importDeclarations_1_1.done; importDeclarations_1_1 = importDeclarations_1.next()) {
            var importDeclaration = importDeclarations_1_1.value;
            var importSpecifier = importDeclaration.specifiers.find(function (importClause) {
                return ((0, guards_1.isImportSpecifier)(importClause) &&
                    importClause.imported.name === importName);
            });
            if (importSpecifier) {
                return { importDeclaration: importDeclaration, importSpecifier: importSpecifier };
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (importDeclarations_1_1 && !importDeclarations_1_1.done && (_a = importDeclarations_1.return)) _a.call(importDeclarations_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return undefined;
}
exports.getImportDeclarationSpecifier = getImportDeclarationSpecifier;
function getImportDeclarations(node, moduleName) {
    var parentNode = node;
    while (parentNode && !(0, guards_1.isProgram)(parentNode)) {
        parentNode = parentNode.parent;
    }
    return parentNode === null || parentNode === void 0 ? void 0 : parentNode.body.filter(function (node) {
        return (0, guards_1.isImportDeclaration)(node) && node.source.value === moduleName;
    });
}
exports.getImportDeclarations = getImportDeclarations;
function getCorrespondentImportClause(importDeclarations, compatibleWithTypeOnlyImport) {
    var e_2, _a;
    if (compatibleWithTypeOnlyImport === void 0) { compatibleWithTypeOnlyImport = false; }
    var importClause;
    try {
        for (var importDeclarations_2 = __values(importDeclarations), importDeclarations_2_1 = importDeclarations_2.next(); !importDeclarations_2_1.done; importDeclarations_2_1 = importDeclarations_2.next()) {
            var _b = importDeclarations_2_1.value, importKind = _b.importKind, specifiers = _b.specifiers;
            var lastImportSpecifier = getLast(specifiers);
            if ((!compatibleWithTypeOnlyImport && importKind === 'type') ||
                (0, guards_1.isImportNamespaceSpecifier)(lastImportSpecifier)) {
                continue;
            }
            importClause = lastImportSpecifier;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (importDeclarations_2_1 && !importDeclarations_2_1.done && (_a = importDeclarations_2.return)) _a.call(importDeclarations_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return importClause;
}
function getImportAddFix(_a) {
    var _b = _a.compatibleWithTypeOnlyImport, compatibleWithTypeOnlyImport = _b === void 0 ? false : _b, fixer = _a.fixer, importName = _a.importName, moduleName = _a.moduleName, node = _a.node;
    var fullImport = "import { ".concat(importName, " } from '").concat(moduleName, "';\n");
    var importDeclarations = getImportDeclarations(node, moduleName);
    if (!(importDeclarations === null || importDeclarations === void 0 ? void 0 : importDeclarations.length)) {
        return fixer.insertTextAfterRange([0, 0], fullImport);
    }
    var importDeclarationSpecifier = getImportDeclarationSpecifier(importDeclarations, importName);
    if (importDeclarationSpecifier) {
        return [];
    }
    var importClause = getCorrespondentImportClause(importDeclarations, compatibleWithTypeOnlyImport);
    if (!importClause) {
        return fixer.insertTextAfterRange([0, 0], fullImport);
    }
    var replacementText = (0, guards_1.isImportDefaultSpecifier)(importClause)
        ? ", { ".concat(importName, " }")
        : ", ".concat(importName);
    return fixer.insertTextAfter(importClause, replacementText);
}
exports.getImportAddFix = getImportAddFix;
function getImportRemoveFix(sourceCode, importDeclarations, importedName, fixer) {
    var _a;
    var _b = (_a = getImportDeclarationSpecifier(importDeclarations, importedName)) !== null && _a !== void 0 ? _a : {}, importDeclaration = _b.importDeclaration, importSpecifier = _b.importSpecifier;
    if (!importDeclaration || !importSpecifier) {
        return [];
    }
    var isFirstImportSpecifier = importDeclaration.specifiers[0] === importSpecifier;
    var isLastImportSpecifier = getLast(importDeclaration.specifiers) === importSpecifier;
    var isSingleImportSpecifier = isFirstImportSpecifier && isLastImportSpecifier;
    if (isSingleImportSpecifier) {
        return fixer.remove(importDeclaration);
    }
    var tokenAfterImportSpecifier = sourceCode.getTokenAfter(importSpecifier);
    if (isFirstImportSpecifier && tokenAfterImportSpecifier) {
        return fixer.removeRange([
            importSpecifier.range[0],
            tokenAfterImportSpecifier.range[1],
        ]);
    }
    var tokenBeforeImportSpecifier = sourceCode.getTokenBefore(importSpecifier);
    if (!tokenBeforeImportSpecifier) {
        return [];
    }
    return fixer.removeRange([
        tokenBeforeImportSpecifier.range[0],
        importSpecifier.range[1],
    ]);
}
exports.getImportRemoveFix = getImportRemoveFix;
function getNodeToCommaRemoveFix(sourceCode, fixer, node) {
    var nextToken = sourceCode.getTokenAfter(node);
    var isNextTokenComma = nextToken && experimental_utils_1.ASTUtils.isCommaToken(nextToken);
    return __spreadArray([
        fixer.remove(node)
    ], __read((isNextTokenComma ? [fixer.remove(nextToken)] : [])), false);
}
exports.getNodeToCommaRemoveFix = getNodeToCommaRemoveFix;
function getInterfaceName(interfaceMember) {
    if ((0, guards_1.isIdentifier)(interfaceMember)) {
        return interfaceMember.name;
    }
    return (0, guards_1.isIdentifier)(interfaceMember.property)
        ? interfaceMember.property.name
        : undefined;
}
exports.getInterfaceName = getInterfaceName;
function getInterfaces(_a) {
    var classImplements = _a.implements;
    return (classImplements !== null && classImplements !== void 0 ? classImplements : [])
        .map(function (_a) {
        var expression = _a.expression;
        return expression;
    })
        .filter(guards_1.isIdentifierOrMemberExpression);
}
exports.getInterfaces = getInterfaces;
function getInterface(node, interfaceName) {
    return getInterfaces(node).find(function (interfaceMember) { return getInterfaceName(interfaceMember) === interfaceName; });
}
exports.getInterface = getInterface;
function getImplementsSchemaFixer(_a, interfaceName) {
    var id = _a.id, classImplements = _a.implements;
    var _b = __read(classImplements && classImplements.length
        ? [getLast(classImplements), ", ".concat(interfaceName)]
        : [id, " implements ".concat(interfaceName)], 2), implementsNodeReplace = _b[0], implementsTextReplace = _b[1];
    return { implementsNodeReplace: implementsNodeReplace, implementsTextReplace: implementsTextReplace };
}
exports.getImplementsSchemaFixer = getImplementsSchemaFixer;
function getLast(items) {
    return items.slice(-1)[0];
}
exports.getLast = getLast;
function getDecoratorName(_a) {
    var expression = _a.expression;
    if ((0, guards_1.isIdentifier)(expression)) {
        return expression.name;
    }
    return (0, guards_1.isCallExpression)(expression) && (0, guards_1.isIdentifier)(expression.callee)
        ? expression.callee.name
        : undefined;
}
exports.getDecoratorName = getDecoratorName;
function getRawText(node) {
    if ((0, guards_1.isIdentifier)(node)) {
        return node.name;
    }
    if ((0, guards_1.isPropertyDefinition)(node) ||
        (0, guards_1.isMethodDefinition)(node) ||
        (0, guards_1.isProperty)(node)) {
        return getRawText(node.key);
    }
    if ((0, guards_1.isLiteral)(node)) {
        return node.raw;
    }
    if ((0, guards_1.isTemplateElement)(node)) {
        return "`".concat(node.value.raw, "`");
    }
    if ((0, guards_1.isTemplateLiteral)(node)) {
        return "`".concat(node.quasis[0].value.raw, "`");
    }
    return null;
}
exports.getRawText = getRawText;
function capitalize(text) {
    return "".concat(text[0].toUpperCase()).concat(text.slice(1));
}
exports.capitalize = capitalize;
function getInjectedParametersWithSourceCode(context, moduleName, importName) {
    var _a, _b, _c, _d, _e;
    var sourceCode = context.getSourceCode();
    var importDeclarations = (_a = getImportDeclarations(sourceCode.ast, moduleName)) !== null && _a !== void 0 ? _a : [];
    var importSpecifier = ((_b = getImportDeclarationSpecifier(importDeclarations, importName)) !== null && _b !== void 0 ? _b : {}).importSpecifier;
    var injectImportDeclarations = (_c = getImportDeclarations(sourceCode.ast, '@angular/core')) !== null && _c !== void 0 ? _c : [];
    var injectImportSpecifier = ((_d = getImportDeclarationSpecifier(injectImportDeclarations, 'inject')) !== null && _d !== void 0 ? _d : {}).importSpecifier;
    if (!importSpecifier) {
        return { sourceCode: sourceCode };
    }
    var variables = context.getDeclaredVariables(importSpecifier);
    var typedVariable = variables.find(function (_a) {
        var name = _a.name;
        return name === importName;
    });
    var identifiers = (_e = typedVariable === null || typedVariable === void 0 ? void 0 : typedVariable.references) === null || _e === void 0 ? void 0 : _e.reduce(function (identifiers, _a) {
        var parent = _a.identifier.parent;
        if (!parent) {
            return identifiers;
        }
        if ((0, guards_1.isTSTypeReference)(parent) &&
            parent.parent &&
            (0, guards_1.isTSTypeAnnotation)(parent.parent) &&
            parent.parent.parent &&
            (0, guards_1.isIdentifier)(parent.parent.parent)) {
            return identifiers.concat(parent.parent.parent);
        }
        var parentToCheck = (0, guards_1.isTSInstantiationExpression)(parent)
            ? parent.parent
            : parent;
        if (parentToCheck &&
            (0, guards_1.isCallExpression)(parentToCheck) &&
            (0, guards_1.isIdentifier)(parentToCheck.callee) &&
            parentToCheck.callee.name == 'inject' &&
            parentToCheck.parent &&
            (0, guards_1.isPropertyDefinition)(parentToCheck.parent) &&
            (0, guards_1.isIdentifier)(parentToCheck.parent.key) &&
            injectImportSpecifier) {
            return identifiers.concat(parentToCheck.parent.key);
        }
        return identifiers;
    }, []);
    return { identifiers: identifiers, sourceCode: sourceCode };
}
function getNgRxEffectActions(context) {
    return getInjectedParametersWithSourceCode(context, ngrx_modules_1.NGRX_MODULE_PATHS.effects, 'Actions');
}
exports.getNgRxEffectActions = getNgRxEffectActions;
function getNgRxComponentStores(context) {
    return getInjectedParametersWithSourceCode(context, ngrx_modules_1.NGRX_MODULE_PATHS['component-store'], 'ComponentStore');
}
exports.getNgRxComponentStores = getNgRxComponentStores;
function getNgRxStores(context) {
    return getInjectedParametersWithSourceCode(context, ngrx_modules_1.NGRX_MODULE_PATHS.store, 'Store');
}
exports.getNgRxStores = getNgRxStores;
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping
function escapeText(text) {
    return text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
exports.escapeText = escapeText;
function asPattern(identifiers) {
    var escapedNames = identifiers.map(function (_a) {
        var name = _a.name;
        return escapeText(name);
    });
    return new RegExp("^(".concat(escapedNames.join('|'), ")$"));
}
exports.asPattern = asPattern;
//# sourceMappingURL=utils.js.map