"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngrxVersionSatisfies = exports.clearCache = exports.setNgrxVersion = void 0;
var semver = __importStar(require("semver"));
var noopVersion = '0.0.0';
var versionsCache = new Map();
var satisfiesCache = new Map();
function getNgrxVersion(pkg) {
    if (!versionsCache.has(pkg)) {
        var version = readPlatformVersion(pkg);
        versionsCache.set(pkg, version !== null && version !== void 0 ? version : noopVersion);
    }
    return versionsCache.get(pkg);
}
function readPlatformVersion(pkg) {
    var _a;
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        var ngrxVersion = require("".concat(pkg, "/package.json"));
        return (_a = ngrxVersion.version) === null || _a === void 0 ? void 0 : _a.replace(/[^\d.]/g, '');
    }
    catch (_b) {
        return null;
    }
}
// @internal for testing purposes
function setNgrxVersion(pkg, version) {
    versionsCache.set(pkg, version);
}
exports.setNgrxVersion = setNgrxVersion;
// @internal for testing purposes
function clearCache() {
    versionsCache.clear();
    satisfiesCache.clear();
}
exports.clearCache = clearCache;
function versionSatisfies(pkg, version) {
    if (!satisfiesCache.has(pkg)) {
        satisfiesCache.set(pkg, semver.satisfies(getNgrxVersion(pkg), version));
    }
    return satisfiesCache.get(pkg);
}
function ngrxVersionSatisfies(pkg, version) {
    return versionSatisfies(pkg, version);
}
exports.ngrxVersionSatisfies = ngrxVersionSatisfies;
//# sourceMappingURL=versions.js.map