{"version":3,"file":"rule-creator.js","sourceRoot":"","sources":["../../../../modules/eslint-plugin/src/rule-creator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4EAAoE;AAEpE,iCAA2E;AAiB3E,SAAgB,UAAU,CAIxB,MAQE;;IAEF,IAAM,eAAe,yBAChB,MAAM,KACT,MAAM,EAAE,UACN,OAA8D,EAC9D,kBAAsC;YAGpC,IAAA,KACE,MAAM,KADqB,EAArB,UAAU,gBAAA,EAAE,OAAO,aAAE,CACpB;YACX,IACE,OAAO,KAAK,SAAS;gBACrB,CAAC,IAAA,4BAAoB,EAAC,yBAAiB,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC,EAC7D,CAAC;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;QACpD,CAAC,GACF,CAAC;;QAEF,KAA6B,IAAA,KAAA,SAAA,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,gBAAA,4BAAE,CAAC;YAAlE,IAAA,KAAA,mBAAc,EAAb,GAAG,QAAA,EAAE,OAAO,QAAA;YACrB,eAAe,CAAC,IAAI,CAAC,QAAgB,CAAC,GAAG,CAAC,GAAG,UAAG,OAAO,eAAK,IAAA,eAAO,EAClE,MAAM,CAAC,IAAI,CACZ,MAAG,CAAC;QACP,CAAC;;;;;;;;;IAED,OAAO,gCAAW,CAAC,WAAW,CAAC,eAAO,CAAC,CAAC,eAAe,CAAC,CAAC;AAC3D,CAAC;AAzCD,gCAyCC","sourcesContent":["import type { TSESLint } from '@typescript-eslint/experimental-utils';\nimport { ESLintUtils } from '@typescript-eslint/experimental-utils';\nimport type { NGRX_MODULE } from './utils';\nimport { docsUrl, ngrxVersionSatisfies, NGRX_MODULE_PATHS } from './utils';\n\ntype Meta<TMessageIds extends string> =\n  | TSESLint.RuleMetaData<TMessageIds> & {\n      ngrxModule: NGRX_MODULE;\n      version?: string;\n    };\ntype CreateRuleMeta<TMessageIds extends string> = {\n  docs: Omit<TSESLint.RuleMetaDataDocs, 'url'>;\n} & Omit<Meta<TMessageIds>, 'docs'>;\nexport type NgRxRuleModule<\n  TOptions extends readonly unknown[],\n  TMessageIds extends string\n> = Omit<TSESLint.RuleModule<TMessageIds, TOptions>, 'meta'> & {\n  meta: Meta<TMessageIds>;\n};\n\nexport function createRule<\n  TOptions extends readonly unknown[],\n  TMessageIds extends string\n>(\n  config: Readonly<{\n    name: string;\n    meta: CreateRuleMeta<TMessageIds>;\n    defaultOptions: Readonly<TOptions>;\n    create: (\n      context: Readonly<TSESLint.RuleContext<TMessageIds, TOptions>>,\n      optionsWithDefault: Readonly<TOptions>\n    ) => TSESLint.RuleListener;\n  }>\n): TSESLint.RuleModule<TMessageIds, TOptions> {\n  const configOverwrite = {\n    ...config,\n    create: (\n      context: Readonly<TSESLint.RuleContext<TMessageIds, TOptions>>,\n      optionsWithDefault: Readonly<TOptions>\n    ) => {\n      const {\n        meta: { ngrxModule, version },\n      } = config;\n      if (\n        version !== undefined &&\n        !ngrxVersionSatisfies(NGRX_MODULE_PATHS[ngrxModule], version)\n      ) {\n        return {};\n      }\n\n      return config.create(context, optionsWithDefault);\n    },\n  };\n\n  for (const [key, message] of Object.entries(configOverwrite.meta.messages)) {\n    (configOverwrite.meta.messages as any)[key] = `${message} (${docsUrl(\n      config.name\n    )})`;\n  }\n\n  return ESLintUtils.RuleCreator(docsUrl)(configOverwrite);\n}\n"]}